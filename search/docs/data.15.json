[{"id":60,"url":"/doc/ros2/Installation/Fedora-Development-Setup/","title":"Building ROS 2 on Fedora Linux","content":"\nBuilding ROS 2 on Fedora Linux¶\n\nHow to setup the development environment?¶\nFirst install a bunch of dependencies:\n$ sudo dnf install cppcheck cmake libXaw-devel opencv-devel poco-devel poco-foundation python3-empy python3-devel python3-nose python3-pip python3-pyparsing python3-pytest python3-pytest-cov python3-pytest-runner python3-setuptools python3-yaml tinyxml-devel eigen3-devel python3-pydocstyle python3-pyflakes python3-coverage python3-mock python3-pep8 uncrustify python3-argcomplete python3-flake8 python3-flake8-import-order asio-devel tinyxml2-devel libyaml-devel\n\n\nThen install vcstool from pip:\n$ pip3 install vcstool\n\n\nWith this done, you can follow the rest of the instructions to fetch and build ROS2.\n\n\n"},{"id":61,"url":"/doc/ros2/Tutorials/RQt-Source-Install-Windows10/","title":"Building RQt from Source on Windows 10","content":"\nBuilding RQt from Source on Windows 10¶\nThis page provides specific information to building RQt from source on Windows.\nFollow these instructions before proceeding with the RQt Source Install page.\nIf you have not done so, follow the ROS 2 Windows Development Setup guide before continuing.\n\nSystem Requirements¶\n\nWindows 10\nVisual Studio 15.7.6\n\nCurrently Visual Studio 15.8 fails to build ROS 2 (see issue).\nOlder versions of VS can be found here.\n\n\nDependencies¶\nThe primary dependencies of the RQt package are sip and PyQt5.\nPySide2 may be supported in the future.\nEven though they are provided through PyPi and chocolatey, you must install them by source to get compatible versions.\n\nInstall sip by source¶\nDownload from https://www.riverbankcomputing.com/software/sip/download\nRun the x64 Native Tools Command Prompt as Administrator, and cd to the uncompressed source directory.\nRun:\npython3 configure.py\nnmake\nnmake install\n\n\nIf python3 is installed on your system as python, be sure to use that program name instead.\n\n\nInstall PyQt5 by source¶\nDownload from https://www.riverbankcomputing.com/software/pyqt/download5\nRun the x64 Native Tools Command Prompt as Administrator, and cd to the uncompressed source directory.\nI ran into trouble with Qt 5.11.3 and PyQt5 compiling QtNfc, but it can be easily disabled.\npython3 configure.py --disable QtNfc\nnmake\nnmake install\n\n\n\n\nTest that it works¶\nIf install occurred without failure, try the commands below.\nThey should run without issue and you should see 4.19.13 as your sip.exe version.\nsip -V\npython3 -c \"from PyQt5 import QtCore\"\n\n\n\n\nOther dependencies¶\nInstall GraphViz from https://graphviz.gitlab.io/_pages/Download/Download_windows.html.\nInstall pydot and pyparsing:\npip3 install pydot pyparsing\n\n\nPyGraphViz is a test dependency of qt_dotgraph, but it is currently unsupported on Windows and building by source is not straight forward.\nManually merging this patch is the currently recommended solution, but I could not get it to work.\n(see pygraphviz patch)\n\n\n\nInstall RQt by source¶\nContinue with the RQt source install page.\n\n\n"},{"id":62,"url":"/doc/ros2/Installation/Windows-Development-Setup/","title":"Building ROS 2 on Windows","content":"\nBuilding ROS 2 on Windows¶\n\nTable of Contents\n\nPrerequisites\nAdditional Prerequisites\n\n\nInstalling Developer Tools\nInstall dependencies\nInstall Qt5\n\n\nGetting the Source Code\nGetting a DDS Vendor\nAdlink OpenSplice\nRTI Connext 5.3\n\n\nBuilding the ROS 2 Code\nTesting and Running\nAlternative DDS Sources\nTroubleshooting\nCMake error setting modification time\n260 Character Path Limit\nCMake Packages Unable to Find asio, tinyxml2, tinyxml, or eigen\npatch.exe Opens a New Command Window and Asks for Administrator\n\n\nExtra stuff for Debug mode\n\n\nThis guide is about how to setup a development environment for ROS2 on Windows.\n\nPrerequisites¶\nFirst follow the steps for Installing Prerequisites on the Binary Installation page.\nStop and return here when you reach the “Downloading ROS 2” section.\n\nAdditional Prerequisites¶\nWhen building from source you’ll need a few additional prerequisites installed.\n\nInstall Additional Prerequisites from Chocolatey¶\nFirst install git:\n> choco install -y git\n\n\nYou will need to append the Git cmd folder C:\\Program Files\\Git\\cmd to the PATH (you can do this by clicking the Windows icon, typing “Environment Variables”, then clicking on “Edit the system environment variables”.\nIn the resulting dialog, click “Environment Variables”, the click “Path” on the bottom pane, then click “Edit” and add the path).\nThen install patch:\n> choco install -y patch\n\n\nYou may need to close the cmd prompt and open a new one, but at this point you should be able to run git, python, cmake, and patch.exe --version.\n\n\n\n\nInstalling Developer Tools¶\nNow we are ready to install some our tools that we use to help in developing ROS 2.\nLet’s start with vcstool:\n> pip install -U vcstool\n\n\nYou can test it out by just running vcs (you should be able to do this in the same cmd prompt).\nNext, install colcon:\n> pip install -U colcon-common-extensions\n\n\nYou can test it out by just running colcon (you should be able to do this in the same cmd prompt).\nAlso, you should install curl:\n> choco install -y curl\n\n\n\n\nInstall dependencies¶\nNext install the latest version of setuptools and pip:\n> <PATH_TO_PYTHON_EXECUTABLE> -m pip install -U setuptools pip\n\n\nWhere PATH_TO_PYTHON_EXECUTABLE looks like: c:\\python37\\python.exe\nThen you can continue installing other Python dependencies:\n> pip install -U catkin_pkg EmPy git+https://github.com/lark-parser/lark.git@0.7d pyparsing pyyaml\n\n\nNext install testing tools like pytest and others:\n> pip install -U pytest coverage mock\n\n\nNext install linters and checkers like flake8 and others:\n> pip install -U flake8 flake8-blind-except flake8-builtins flake8-class-newline flake8-comprehensions flake8-deprecated flake8-docstrings flake8-import-order flake8-quotes pep8 pydocstyle\n\n\nNext install cppcheck:\n> choco install -y cppcheck\n\n\nYou will need to add C:\\Program Files\\Cppcheck to the PATH.\n\nInstall Qt5¶\nThis section is only required if you are building rviz, but it comes with our default set of sources, so if you don’t know, then assume you are building it.\nFirst get the installer from Qt’s website:\nhttps://www.qt.io/download\nSelect the Open Source version and then the Qt Online Installer for Windows.\nRun the installer and install Qt5.\nWe recommend you install it to the default location of C:\\Qt, but if you choose somewhere else, make sure to update the paths below accordingly.\nWhen selecting components to install, the only thing you absolutely need for bouncy and later is the appropriate MSVC 64-bit component under the Qt -> Qt 5.10.0 tree.\nWe’re using 5.10.0 as of the writing of this document and that’s what we recommend since that’s all we test on Windows, but later version will probably work too.\nFor bouncy and later, be sure to select MSVC 2017 64-bit. For ardent use MSVC 2015 64-bit.\nAfter that, the default settings are fine.\nFinally, set the Qt5_DIR environment variable in the cmd.exe where you intend to build so that CMake can find it:\n> set Qt5_DIR=C:\\Qt\\5.10.0\\msvc2017_64\n: You could set it permanently with ``setx -m Qt5_DIR C:\\Qt\\5.10.0\\msvc2017_64`` instead, but that requires Administrator.\n\n\nNote, this path might change based on which MSVC version you’re using or if you installed it to a different directory.\n\nRQt dependencies¶\n> pip install -U pydot PyQt5\n\n\n\n\n\n\nGetting the Source Code¶\nNow that we have the development tools we can get the ROS 2 source code.\nFirst setup a development folder, I use C:\\dev\\ros2:\n> md \\dev\\ros2\\src\n> cd \\dev\\ros2\n\n\nGet the ros2.repos file which defines the repositories to clone from:\n# CMD\n> curl -sk https://raw.githubusercontent.com/ros2/ros2/release-latest/ros2.repos -o ros2.repos\n\n# PowerShell\n> curl https://raw.githubusercontent.com/ros2/ros2/release-latest/ros2.repos -o ros2.repos\n\n\n\nNote: if you want to get all of the latest bug fixes then you can try the “tip” of development by replacing release-latest in the URL above with master. The release-latest is preferred by default because it goes through more rigorous testing on release than changes to master do. See also Maintaining a Source Checkout.\nNext you can use vcs to import the repositories listed in the ros2.repos file:\n# CMD\n> vcs import src < ros2.repos\n\n# PowerShell\n> vcs import --input ros2.repos src\n\n\n\n\nGetting a DDS Vendor¶\nYou’ll also need a DDS Vendor available for ROS to build against.\nThere is currently support for eProsima FastRTPS, Adlink’s OpenSplice, and RTI’s Connext DDS.\nThe source distribution of ROS 2 includes FastRTPS, so it will always build unless explicitly ignored.\n\nAdlink OpenSplice¶\nIf you would like to also build against OpenSplice, you will need to first download the latest version of OpenSplice.\nThen run something like the following command before building ROS 2, to set up the OpenSplice environment:\ncall \"C:\\opensplice69\\HDE\\x86_64.win64\\release.bat\"\n\n\nwhere the exact paths may need to be slightly altered depending on where you selected to install OpenSplice.\n\n\nRTI Connext 5.3¶\nIf you would like to also build against RTI Connext, you will need to first visit the RTI website and obtain a license (evaluation or purchased) for RTI Connext DDS as well as the installer via their downloads page.\nAfter installing, use the RTI Launcher to load your license file.\nThen before building ROS 2, set up the Connext environment:\ncall \"C:\\Program Files\\rti_connext_dds-5.3.1\\resource\\scripts\\rtisetenv_x64Win64VS2017.bat\"\n\n\nNote that this path might need to be slightly altered depending on where you selected to install RTI Connext DDS.\nThe path above is the current default path as of version 5.3.1, but will change as the version numbers increment in the future.\nIf you want to install the Connext DDS-Security plugins please refer to this page.\nIf you don’t install any additional DDS vendors, ROS 2 will default to using eProsima’s Fast-RTPS as the middleware.\n\n\n\nBuilding the ROS 2 Code¶\nTo build ROS 2 you will need a Visual Studio Command Prompt (usually titled “x64 Native Tools Command Prompt for VS 2017” for bouncy and later or “x64 Native Tools Command Prompt for VS 2015” for ardent and earlier) running as Administrator.\nFastRTPS is bundled with the ROS 2 source and will always be built unless you put an AMENT_IGNORE file in the src\\eProsima folder.\nTo build the \\dev\\ros2 folder tree:\n> colcon build --merge-install\n\n\nNote, we’re using --merge-install here to avoid a PATH variable that is too long at the end of the build. If you’re adapting these instructions to build a smaller workspace then you might be able to use the default behavior which is isolated install, i.e. where each package is installed to a different folder.\nNote, if you are doing a debug build use python_d path\\to\\colcon_executable colcon.\nSee Extra stuff for debug mode for more info on running Python code in debug builds on Windows.\n\n\nTesting and Running¶\nNote that the first time you run any executable you will have to allow access to the network through a Windows Firewall popup.\nYou can run the tests using this command:\n> colcon test\n\n\nAfterwards you can get a summary of the tests using this command:\n> colcon test-result\n\n\nTo run the examples, first open a clean new cmd.exe and set up the workspace.\nThis is done by sourcing the local_setup.bat file, which will automatically set up the environment for any DDS vendors that support was built for.\nThen execute the examples, e.g.:\n> call install\\local_setup.bat\n> ros2 run demo_nodes_py talker\n\n\nIn a separate shell you can do the same, but instead run the listener:\n> call install\\local_setup.bat\n> ros2 run demo_nodes_py listener\n\n\nFor more explanations see the Python Programming demo or other tutorials.\nNote: it is not recommended to build in the same cmd prompt that you’ve sourced the local_setup.bat.\n\n\nAlternative DDS Sources¶\nThe demos will attempt to build against any detected DDS vendor.\nThe only bundled vendor is eProsima’s Fast RTPS, which is included in the default set of sources for ROS 2.0.\nTo build for other vendors, make sure that your chosen DDS vendor(s) are exposed in your environment when you run the build.\nIf you would like to change which vendor is being used see: Working with Multiple RMW Implementations\n\n\nTroubleshooting¶\n\nCMake error setting modification time¶\nIf you run into the CMake error file INSTALL cannot set modification time on ... when installing files it is likely that an anti virus software or Windows Defender are interfering with the build. E.g. for Windows Defender you can list the workspace location to be excluded to prevent it from scanning those files.\n\n\n260 Character Path Limit¶\nThe input line is too long.\nThe syntax of the command is incorrect.\n\n\nYou may see path length limit errors when building your own libraries, or maybe even in this guide as ROS2 matures.\nRun regedit.exe, navigate to Computer\\HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Control\\FileSystem, and set LongPathsEnabled to 0x00000001 (1).\nHit the windows key and type Edit Group Policy. Navigate to Local Computer Policy > Computer Configuration > Administrative Templates > System > Filesystem. Right click Enable Win32 long paths, click Edit. In the dialog, select Enabled and click OK.\nClose and open your terminal to reset the environment and try building again.\n\n\nCMake Packages Unable to Find asio, tinyxml2, tinyxml, or eigen¶\nWe’ve seen, but been unable to identify the root cause, that sometimes the chocolatey packages for asio, tinyxml2, etc. do not add important registry entries and that will cause CMake to be unable to find them when building ROS 2.\nIt seems that uninstalling the chocolatey packages (with -n if the uninstall fails the first time) and then reinstalling them will fix the issue.\n\n\npatch.exe Opens a New Command Window and Asks for Administrator¶\nThis will also cause the build of packages which need to use patch to fail, even you allow it to use administrator rights.\nThe solution, for now, is to make sure you’re building in a Visual Studio command prompt which has been run as administrator. On some machines canceling the prompt without selecting “Yes” will also work.\n\n\n\nExtra stuff for Debug mode¶\nIf you want to be able to run all the tests in Debug mode, you’ll need to install a few more things:\n\nTo be able to extract the Python source tarball, you can use PeaZip:\n\n> choco install -y peazip\n\n\n\nYou’ll also need SVN, since some of the Python source-build dependencies are checked out via SVN:\n\n> choco install -y svn hg\n\n\n\nYou’ll need to quit and restart the command prompt after installing the above.\nGet and extract the Python 3.7.0 source from the tgz:\nhttps://www.python.org/ftp/python/3.7.0/Python-3.7.0.tgz\nTo keep these instructions concise, please extract it to C:\\dev\\Python-3.7.0\n\n\nNow, build the Python source in debug mode from a Visual Studio command prompt:\n\n> cd C:\\dev\\Python-3.7.0\\PCbuild\n> get_externals.bat\n> build.bat -p x64 -d\n\n\n\nFinally, copy the build products into the Python37 installation directories, next to the Release-mode Python executable and DLL’s:\n\n> cd C:\\dev\\Python-3.7.0\\PCbuild\\amd64\n> copy python_d.exe C:\\Python37 /Y\n> copy python37_d.dll C:\\Python37 /Y\n> copy python3_d.dll C:\\Python37 /Y\n> copy python37_d.lib C:\\Python37\\libs /Y\n> copy python3_d.lib C:\\Python37\\libs /Y\n> for %I in (*_d.pyd) do copy %I C:\\Python37\\DLLs /Y\n\n\n\nNow, from a fresh command prompt, make sure that python_d works:\n\n> python_d\n> import _ctypes\n\n\n\nTo create executables python scripts(.exe), python_d should be used to invoke colcon\n\n> python_d path\\to\\colcon_executable build\n\n\n\nHooray, you’re done!\n\n\n\n"},{"id":63,"url":"/doc/ros2/Contributing/Set-up-a-new-macOS-CI-node/","title":"How to setup a macOS Jenkins node","content":"\nHow to setup a macOS Jenkins node¶\n\nTable of Contents\n\nInstall macOS High Sierra\nSetup SSH/VNC for Remote Access\nHost Setup\nInstall ROS 2 Dependencies\nSetting up the Jenkins Workspace and Agent\n\n\n\nNote\nLast installed/updated on 2017-11-20 (Mac OS 10.13.1 High Sierra) and see this older (private) document for previous instructions.\n\n\nInstall macOS High Sierra¶\nInstall: APFS case-sensitive\nPost-install: No Siri, no location services, no cloud anything, no analytics, no filevault disk encryption.\n\n\nSetup SSH/VNC for Remote Access¶\nMake sure you don’t use too long of a password.\nThat makes VNC auth fail in bizarre ways.\nIn particular, VNC auth limits you to 8 characters.\n\nGo to: Apple->System Preferences->Sharing\nset hostname to something reasonable\ncheck “Remote Login”\ncheck “Screen Sharing”\n\n\nadd Terminal to the dock\nGo to: Apple->System Preferences->Energy Saver\nset sleep to never\nuncheck everything\n\n\nGo to: Apple->Security\nclick lock to unlock it\n“Allow Apps from app store and verified developers”\nuncheck “Require password after 5 minutes” box\nuncheck “Disable automatic login”\n\n\n\n\n\nHost Setup¶\nInstall XCode tools:\n$ xcode select --install\n\n\nInstall JDK for Jenkins.\nEasiest way is to type java at the terminal and let Apple link you to Oracle’s JDK download.\nI installed the latest JDK 8 (withholding Java 9 for now).\nInstall Homebrew following instructions at https://brew.sh\nInstall ssh-askpass via homebrew\n$ brew tap theseal/ssh-askpass\n$ brew install ssh-askpass\n\n\nCreate ~/.bash_profile with this one line:\n. ~/.bashrc\n\n\nCreate ~/.bashrc with one line:\nexport ROS_DOMAIN_ID=XXX  # where XXX is chosen from this document\n\n\nSet up dummy git names:\n$ git config --global user.email \"nobody@osrfoundation.org\"\n$ git config --global user.name \"HOSTNAME\"\n\n\n\n\nInstall ROS 2 Dependencies¶\nInstall them according to our install instructions.\nIncluding:\n\nbrew packages\npip packages\nthe optional RTI Connext and OpenSplice packages\neverything but downloading the source and building ROS 2 (unless you want to do so for testing the setup)\n\n\nRQt dependencies¶\n\nbrew install sip pyqt5\n\nFix some path names when looking for sip stuff during install (see ROS 1 wiki):\nln -s /usr/local/share/sip/Qt5 /usr/local/share/sip/PyQt5\n\nbrew install graphviz\n\npython3 -m pip install pygraphviz pydot\n\nbrew link --force qt\nThis is the quickest solution but may cause issues when upgrading Qt or if other packages are expecting Qt 4.\nAnother option is to update your PATH and CMAKE_PREFIX_PATH to include the Qt install location:\n$ export PATH=\"$(brew --prefix qt)/bin:$PATH\"\n$ export CMAKE_PREFIX_PATH=\"$(brew --prefix qt):$CMAKE_PREFIX_PATH\"\n\n\n\n\n\n\nRTI Connext Specific Instructions¶\n\nThe Open Robotics license is here (private repo): https://github.com/osrf/rticonnextdds-src/blob/license/rti_license.dat\nOpen the RTI launcher application\nIn the RTI launcher, open the file dialog to choose the license file.\nInstall it for all users.\nClick the Installation tab\nClick RTI Package installer\n\n\nNavigate to the connext extracted directory (usually something like /Applications/rti_...\nSelect the rti_security rtipkg (don’t bother with the openssl ones, we use system openssl)\n\n\nSet the shared memory parameters from https://community.rti.com/kb/osx510\nDo not bother to reboot yet.\n\n\n\n\n\n\nSetting up the Jenkins Workspace and Agent¶\n$ mkdir jenkins jenkins-agent\n$ cd jenkins-agent\n$ wget http://ci.ros2.org/jnlpJars/slave.jar\n\n\nCopy the jenkins agent plist from https://gist.github.com/nuclearsandwich/c9546e76ba63767bc1025c393e85235b\nEdit the file to match the jnlp url and secret of the host you’re setting up.\nYou may need to create a new agent if you’re not re-imaging an existing one.\n$ mkdir ~/Library/LaunchAgents\n$ cp ~/jenkins-agent/org.ros2.ci.jenkins-agent.plist ~/Library/LaunchAgents\n$ launchctl load -w ~/Library/LaunchAgents/org.ros2.ci.jenkins-agent.plist\n\n\nReboot! You should be good to go, run some test CI jobs.\n\n\n"}]