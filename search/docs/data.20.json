[{"id":80,"url":"/doc/ros2/Tutorials/Building-Realtime-rt_preempt-kernel-for-ROS-2/","title":"Building Realtime Linux for ROS 2 [community-contributed]","content":"\nBuilding Realtime Linux for ROS 2 [community-contributed]¶\nThis tutorial begins with a clean Ubuntu 16.04.2 install. Actual kernel is 4.13.0-38-generic, but we will install another one.\nIf you are a company or rich person :) using rt_preempt, check https://wiki.linuxfoundation.org/realtime/rtl/blog#preempt-rt-history .\nCheck on https://wiki.linuxfoundation.org/realtime/start what the latest stable version is, at this time it is  Latest Stable Version 4.9-rt. If we click on the link, we get the exact version, it is patch-4.9.84-rt62.patch.gz\n\nWe create a directory in our home dir with\nmkdir ~/kernel\n\n\nand switch into it with\ncd ~/kernel\n\n\nWe can go with a browser to https://mirrors.edge.kernel.org/pub/linux/kernel/v4.x/ and see if the version is there, then download it with\nwget https://mirrors.edge.kernel.org/pub/linux/kernel/v4.x/linux-4.9.84.tar.gz\n\n\nunpack it with\ntar -xzf linux-4.9.84.tar.gz\n\n\nrename it to the same name with postfix of the patch version\nmv linux-4.9.84 linux-4.9.84-rt62\n\n\ndownload rt_preempt patch with\nwget ftp.ntu.edu.tw/linux/kernel/projects/rt/4.9/older/patch-4.9.84-rt62.patch.gz\n\n\nunpack it with\ngunzip patch-4.9.84-rt62.patch.gz\n\n\nThen switch into the linux directory with\ncd linux-4.9.84-rt62/\n\n\nand patch the kernel with the realtime patch\npatch -p1 < ../patch-4.9.84-rt62.patch\n\n\n\nWe simply wanna use the config of our ubuntu installation, so we use the ubuntu config with\ncp /boot/config-4.13.0-38-generic .config\n\n\nTo enable all ubuntu-configurations, we simply use\nyes '' | make oldconfig\n\n\nWe need some tools, install them with\nsudo apt install libncurses5-dev build-essential libssl-dev ccache\n\n\nThen we need to enable rt_preempt in the kernel. We call\nmake menuconfig\n\n\nand choose under “Processor Type and Features”  —  “Preemption Model”  — “Fully Preemptible kernel (RT)”\n\nExit menuconfig and run\nmake\n\n\nYou could use “make -j4” if you got 4-cpu-cores to build faster.\nThen we need to build the kernel modules with\nsudo make modules_install\n\n\nThen we install the kernel to /boot and update grub with\nsudo make install\n\n\n\n\n"},{"id":81,"url":"/doc/ros2/Tutorials/Run-2-nodes-in-two-separate-docker-containers/","title":"Running 2 nodes in 2 separate docker containers [community-contributed]","content":"\nRunning 2 nodes in 2 separate docker containers [community-contributed]¶\nOpen a terminal. Run the image in a container in interactive mode and launch a topic publisher (executable talker from the package demo_nodes_cpp) with ros2 run:\ndocker run -it --rm osrf/ros2:ardent-basic ros2 run demo_nodes_cpp talker\n\n\nOpen a second terminal. Run the image in a container in interactive mode and launch a topic subscriber (executable listener from the package demo_nodes_cpp)  with ros2 run:\ndocker run -it --rm osrf/ros2:ardent-basic ros2 run demo_nodes_cpp listener\n\n\nAs an alternative to the command line invocation, you can create a docker-compose.yml file (here version 2) with the following (minimal) content:\nversion: '2'\n\nservices:\n  talker:\n    image: osrf/ros2:ardent-basic\n    command: ros2 run demo_nodes_cpp talker\n  listener:\n    image: osrf/ros2:ardent-basic\n    command: ros2 run demo_nodes_cpp listener\n    depends_on:\n      - talker\n\n\nTo run the containers call docker-compose up in the same directory. You can close the containers with Ctrl+C.\n\n"},{"id":82,"url":"/doc/ros2/Contributing/Examples-and-Tools-for-ROS1----ROS2-Migrations/","title":"Examples and tools for ROS1-to-ROS2 Migration","content":"\nExamples and tools for ROS1-to-ROS2 Migration¶\n\nExamples of node/component level migrations¶\n\nRviz has been ported https://github.com/ros2/rviz.git\nAutoware algorithms https://gitlab.com/AutowareAuto/AutowareAuto\n\n\n\nExamples of system level migrations¶\n\nTurtlebot has been ported to ROS2\nhttps://discourse.ros.org/t/tb3-introducing-ros2-tutorials/5959\nToyota’s Jaguar 4x4\nhttps://roscon.ros.org/2018/presentations/ROSCon2018_supercharging_the_jaguar4x4.pdf\n\n\n\nUseful tools¶\n\nAmazon has exposed their tools for porting ROS1 robots to ROS2\nhttps://github.com/awslabs/ros2-migration-tools/tree/master/ros2_migration/porting_tools\n\n\n\n"}]