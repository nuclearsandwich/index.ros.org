[{"id":8,"url":"/doc/ros2/Installation/","title":"Installation","content":"\nInstallation¶\n\n\n\nBinary packages¶\nWe provide ROS 2 binary packages for the following platforms:\n\nLinux (Ubuntu Xenial(16.04) and Ubuntu Bionic(18.04))\nDebian packages\n“fat” archive\n\n\nOS X\nWindows\n\n\n\nBuilding from source¶\nWe support building ROS 2 from source on the following platforms:\n\nLinux\nOS X\nWindows\n\n\n\n"},{"id":9,"url":"/doc/ros2/Contributing/","title":"Contributing to ROS 2","content":"\nContributing to ROS 2¶\n\nTable of Contents\n\nDesign discussions\nSupport\nContributing code\n\n\nThere are a number of ways you can contribute to the ROS 2 project.\n\nDesign discussions¶\nDiscussions about the design of ROS 2 are ongoing on the ROS 2 forum.\nParticipating in these discussions is an important way to have a say on how different features of ROS 2 will work and will be implemented.\nThe diverse community behind the ROS ecosystem is one of its greatest assets.\nWe encourage all members of the ROS community to participate in these design discussions so that we can 1) leverage the experience of community members, and 2) keep the varied use cases of ROS in mind.\n\n\nSupport¶\nOne of the easiest ways that you can contribute to ROS 2 is by helping other community members troubleshoot their system.\nROS 2 users come from a range of technical backgrounds, use a variety of different operating systems/platforms, and don’t necessarily have any prior experience with ROS (1 or 2).\nIf you see an issue on ROS Answers that is similar to something you’ve run into yourself, please consider providing some pointers to what helped in your situation.\n+Don’t worry if you are not sure if your response is correct - simply say so, and other community members will jump in if necessary.\n\n\nContributing code¶\n\nSetting up your development environment¶\nTo get started, you’ll want to install from source; follow the source installation instructions for your platform.\n\n\nDevelopment Guides¶\n\n\nROS 2 On-boarding Guide\nROS 2 Developer Guide\nDesign Guide: Common patterns in ROS 2\nQuality Guide: Ensuring code quality\nMISRA Compliance Guide\nBuild Cop and Build Farmer Guide\nMigration guide from ROS 1\nExamples and tools for ROS1-to-ROS2 Migration\nUsing Sphinx for cross-referencing packages\n\n\n\n\nWhat to work on¶\nWe have identified a number of tasks that could be worked on by community members: they can be listed by searching across the ROS 2 repositories for issues labeled as “help wanted” or filtering the items on the ROS 2 waffle.io board.\nIf you see something on that list that you would like to work on, please comment on the item to let others know that you are looking into it.\nWe also have a label for issues that we think should be more accessible for first-time contributors, labelled “good first issue”.\nIf you are interested in contributing to the ROS 2 project, we encourage you to take a look at those issues first.\nIf you’d like to cast a wider net, we welcome contributions on any open issue (or others that you might propose), particularly tasks that have a milestone signifying they’re targeted for the next ROS 2 release (the milestone will be the next release’s codename e.g. ‘crystal’).\nIf you have some code to contribute that fixes a bug or improves documentation, please submit it as a pull request to the relevant repository.\nFor larger changes, it is a good idea to discuss the proposal on the ROS 2 forum before you start to work on it so that you can identify if someone else is already working on something similar.\nIf your proposal involves changes to the APIs, it is especially recommended that you discuss the approach before starting work.\n\n\nSubmitting your code changes¶\nCode contributions should be made via pull requests to the appropriate ros2 repositories.\nWe ask all contributors to follow the practices explained in the developer guide.\nPlease be sure to run tests for your code changes because most packages have tests that check that the code complies with our style guidelines.\n\n\n\n"},{"id":10,"url":"/doc/ros2/Tutorials/tf2/","title":"Using tf2 with ROS 2","content":"\nUsing tf2 with ROS 2¶\nThere is preliminary support for tf2 in ROS 2. We rely heavily on tf2 in ROS 1 to manage data about coordinate transforms, and we expect to continue to use extensively in ROS 2.\nHere’s how to try it out. In each shell, be sure to start by sourcing the ROS 2 setup file as usual (e.g. on Linux . ~/ros2_ws/install/setup.bash or on Windows call C:\\dev\\ros2\\install\\setup.bat).\n\nPublishing transform data¶\nFirst run the static_transform_publisher to generate tf2 data:\nros2 run tf2_ros static_transform_publisher 1 2 3 0.5 0.1 -1.0 foo bar\n\n\nThat tool will publish a static transform from the parent frame foo to the child frame bar with (X, Y, Z) translation (1, 2, 3) and (roll, pitch, yaw) rotation (0.5, 0.1, -1.0).\n\n\nReceiving transform data¶\nNow we can check whether it’s possible to receive that transform data with tf2_echo:\nros2 run tf2_ros tf2_echo foo bar\n\n\nYou should see repeated output similar to this:\nAt time 0.0\n- Translation: [1.000, 2.000, 3.000]\n- Rotation: in Quaternion [-0.475, -0.076, 0.240, 0.843]\n\n\nNote that tf2_echo is reporting the rotation as a quaternion as opposed to roll, pitch, and yaw.\n\n\n"},{"id":11,"url":"/doc/ros2/Related-Projects/","title":"Related Projects","content":"\nRelated Projects¶\n\n\nIntel ROS2 Projects\n\n\n\n"}]