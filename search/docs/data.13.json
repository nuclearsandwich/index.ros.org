[{"id":52,"url":"/doc/ros2/Contributing/Migration-Guide-Python/","title":"Python Migration guide from ROS 1","content":"\nPython Migration guide from ROS 1¶\n\nNode Initialization¶\n# rospy.init_node('asdf')\nrclpy.init(args=sys.argv)\nnode = rclpy.create_node('asdf')\n\n\n\n\nCreating a Publisher¶\n# pub = rospy.Publisher('chatter', String)\npub = node.create_publisher(String, 'chatter')\n\n\n\n\nCreating a Subscriber¶\n# sub = rospy.Subscriber('chatter', String, callback)\nsub = node.create_subscription(String, 'chatter', callback)\n\n\n\n\nCreating a Service¶\n# srv = rospy.Service('add_two_ints', AddTwoInts, add_two_ints_callback)\nsrv = node.create_service(AddTwoInts, 'add_two_ints', add_two_ints_callback)\n\n\n\n\nCreating a Service Client¶\n# rospy.wait_for_service('add_two_ints')\n# add_two_ints = rospy.ServiceProxy('add_two_ints', AddTwoInts)\n# resp = add_two_ints(req)\nadd_two_ints = node.create_client(AddTwoInts, 'add_two_ints')\nwhile not add_two_ints.wait_for_service(timeout_sec=1.0):\n    node.get_logger().info('service not available, waiting again...')\nresp = add_two_ints.call_async(req)\nrclpy.spin_until_future_complete(node, resp)\n\n\n\n\n"},{"id":53,"url":"/doc/ros2/Installation/Windows-Install-Binary/","title":"Installing ROS 2 on Windows","content":"\nInstalling ROS 2 on Windows¶\n\nTable of Contents\n\nSystem requirements\nInstalling prerequisites\nInstall Chocolatey\nInstall Python\nInstall OpenSSL\nInstall Visual Studio\nInstall additional DDS implementations (optional)\nInstall OpenCV\nInstall dependencies\n\n\nDownloading ROS 2\nSet up the ROS 2 environment\nTry some examples\nTroubleshooting\n\n\n\n\nThis page explains how to install ROS 2 on Windows from a pre-built binary package.\n\nSystem requirements¶\nAs of beta-2 only Windows 10 is supported.\n\n\nInstalling prerequisites¶\n\nInstall Chocolatey¶\nChocolatey is a package manager for Windows, install it by following their installation instructions:\nhttps://chocolatey.org/\nYou’ll use Chocolatey to install some other developer tools.\n\n\nInstall Python¶\nOpen a Command Prompt and type the following to install Python via Chocolatey:\n> choco install -y python\n\n\n\n\nInstall OpenSSL¶\nDownload an OpenSSL installer from this page. Scroll to the bottom of the page and download Win64 OpenSSL v1.0.2. Don’t download the Win32 or Light versions.\nRun the installer with default parameters. Then, define environment variables (the following commands assume you used the default installation directory):\n\nsetx -m OPENSSL_CONF C:\\OpenSSL-Win64\\bin\\openssl.cfg\nAdd C:\\OpenSSL-Win64\\bin\\ to your PATH\n\n\n\nInstall Visual Studio¶\nA. Install Visual Studio 2015 if using Ardent or earlier\n\nIf you already have a paid version of Visual Studio 2015 (Professional, Enterprise), skip this step.\nMicrosoft provides a free of charge version of Visual Studio 2015, named Community, which can be used to build applications that use ROS 2:\nhttps://www.visualstudio.com/vs/older-downloads/\nMake sure that the Visual C++ features are installed. First choose ‘Custom installation’:\n\nNext check Visual C++:\n\nEnsure that the correct features will be installed:\n\n\nB. Install Visual Studio 2017 if using Bouncy or a nightly\n\nIf you already have a paid version of Visual Studio 2017 (Professional, Enterprise), skip this step.\n\nWarning\nVisual Studio 2017 v15.8 seems to have a compiler bug preventing from building some ROS 2 packages. Please try installing an older version of Visual Studio 2017.\nMicrosoft provides a free of charge version of Visual Studio 2017, named Community, which can be used to build applications that use ROS 2:\nhttps://visualstudio.microsoft.com/downloads/\nMake sure that the Visual C++ features are installed.\nAn easy way to make sure they’re installed is to select the Desktop development with C++ workflow during the install.\n\n\n\n\nInstall additional DDS implementations (optional)¶\nROS 2 builds on top of DDS.\nIt is compatible with multiple DDS or RTPS (the DDS wire protocol) vendors.\nThe package you downloaded has been built with optional support for multiple vendors: eProsima FastRTPS, Adlink OpenSplice, and (as of ROS 2 Bouncy) RTI Connext as the middleware options.\nRun-time support for eProsima’s Fast RTPS is included bundled by default.\nIf you would like to use one of the other vendors you will need to install their software separately.\n\nAdlink OpenSplice¶\nIf you want to use OpenSplice, you will need to download the latest supported version.\n* For ROS 2 Crystal version 6.9.181126OSS-HDE-x86_64.win-vs2017 or later is required.\n* For ROS 2 Bouncy version 6.7.180404OSS-HDE-x86_64.win-vs2017 or later is required.\nDownload the latest supported version\nFor ROS 2 releases up to and including Ardent, extract it but do not do anything else at this point.\nFor ROS 2 releases later than Ardent, set the OSPL_HOME environment variable to the unpacked directory that contains the release.bat script.\n\n\nRTI Connext¶\nTo use RTI Connext (available as of ROS 2 Bouncy) you will need to have obtained a license from RTI.\nYou can install the Windows package of Connext version 5.3.1 provided by RTI from their downloads page.\nAfter installing, run RTI launcher and point it to your license file.\nSet the NDDSHOME environment variable:\nset \"NDDSHOME=C:\\Program Files\\rti_connext_dds-5.3.1\"\n\n\nIf you want to install the Connext DDS-Security plugins please refer to this page.\n\n\n\nInstall OpenCV¶\nSome of the examples require OpenCV to be installed.\nYou can download a precompiled version of OpenCV 3.4.1 from https://github.com/ros2/ros2/releases/download/opencv-archives/opencv-3.4.1-vc15.VS2017.zip\nAssuming you unpacked it to C:\\opencv, type the following on a Command Prompt (requires Admin privileges):\nsetx -m OpenCV_DIR C:\\opencv\n\n\nSince you are using a precompiled ROS version, we have to tell it where to find the OpenCV libraries. You have to extend the PATH variable to c:\\opencv\\x64\\vc15\\bin\n\nIn ardent and earlier¶\nThese releases used OpenCV 2. You can download a precompiled version of OpenCV 2.4.13.2 from https://github.com/ros2/ros2/releases/download/release-beta2/opencv-2.4.13.2-vc14.VS2015.zip\nSince you are using a precompiled ROS version, we have to tell it where to find the OpenCV libraries. Assuming you were extracting OpenCV to c:\\ you have to extend the PATH variable to c:\\opencv-2.4.13.2-vc14.VS2015\\x64\\vc14\\bin\n\n\n\nInstall dependencies¶\nThere are a few dependencies not available in the Chocolatey package database. In order to ease the manual installation process, we provide the necessary Chocolatey packages.\nAs some chocolatey packages rely on it, we start by installing CMake\n> choco install -y cmake\n\n\nYou will need to append the CMake bin folder C:\\Program Files\\CMake\\bin to the PATH (you can do this by clicking the Windows icon, typing “Environment Variables”, then clicking on “Edit the system environment variables”.\nIn the resulting dialog, click “Environment Variables”, the click “Path” on the bottom pane, then click “Edit” and add the path).\nPlease download these packages from this GitHub repository.\n\nasio.1.12.1.nupkg\neigen-3.3.4.nupkg\ntinyxml-usestl.2.6.2.nupkg\ntinyxml2.6.0.0.nupkg\n\nOnce these packages are downloaded, open an administrative shell and execute the following command:\n> choco install -y -s <PATH\\TO\\DOWNLOADS\\> asio eigen tinyxml-usestl tinyxml2\n\n\nPlease replace <PATH\\TO\\DOWNLOADS> with the folder you downloaded the packages to.\nYou must also install some python dependencies for command-line tools:\npython -m pip install -U catkin_pkg empy git+https://github.com/lark-parser/lark.git@0.7b opencv-python pyparsing pyyaml setuptools\n\n\n\nRQt dependencies¶\npython -m pip install -U pydot PyQt5\n\n\n\n\n\n\nDownloading ROS 2¶\n\nGo the releases page: https://github.com/ros2/ros2/releases\nDownload the latest package for Windows, e.g., ros2-package-windows-AMD64.zip.\nNotes:\nthere may be more than one binary download option which might cause the file name to differ.\n[ROS Bouncy only] To download the ROS 2 debug libraries you’ll need to download ros2-bouncy-windows-Debug-AMD64.zip\n\n\n\n\nUnpack the zip file somewhere (we’ll assume C:\\dev\\ros2).\nNote (Ardent and earlier): There seems to be an issue where extracting the zip file with 7zip causes RViz to crash on startup. Extract the zip file using the Windows explorer to prevent this.\n\n\n\n\n\nSet up the ROS 2 environment¶\nStart a command shell and source the ROS 2 setup file to set up the workspace:\n> call C:\\dev\\ros2\\local_setup.bat\n\n\nFor ROS 2 releases up to and including Ardent, if you downloaded a release with OpenSplice support you must additionally source the OpenSplice setup file manually (this is done automatically for ROS 2 releases later than Ardent; this step can be skipped).\nIt is normal that the previous command, if nothing else went wrong, outputs “The system cannot find the path specified.” exactly once.\nOnly do this step after you have sourced the ROS 2 setup file:\n> call \"C:\\opensplice69\\HDE\\x86_64.win64\\release.bat\"\n\n\n\n\nTry some examples¶\nIn a command shell, set up the ROS 2 environment as described above and then run a talker:\n> ros2 run demo_nodes_cpp talker\n\n\nStart another command shell and run a listener:\n> ros2 run demo_nodes_py listener\n\n\nYou should see the talker saying that it’s Publishing messages and the listener saying I heard those messages.\nHooray!\nIf you have installed support for an optional vendor, see this page for details on how to use that vendor.\n\nTroubleshooting¶\n\nIf at one point your example would not start because of missing dll’s, please verify that all libraries from external dependencies such as OpenCV are located inside your PATH variable.\nIf you forget to call the local_setup.bat file from your terminal, the demo programs will most likely crash immediately.\n\n\n\n\n"},{"id":54,"url":"/doc/ros2/Concepts/Overview-of-ROS-2-concepts/","title":"Overview of ROS 2 Concepts","content":"\nOverview of ROS 2 Concepts¶\n\nTable of Contents\n\nQuick Overview of Graph Concepts\nNodes\nClient Libraries\nDiscovery\nExample: talker-listener\n\n\nROS is a middleware based on an anonymous publish/subscribe mechanism that allows for message passing between different ROS processes.\nAt the heart of any ROS 2 system is the ROS graph.\nThe ROS graph refers to the network of nodes in a ROS system and the connections between them by which they communicate.\n\nQuick Overview of Graph Concepts¶\n\nNodes: A node is an entity that uses ROS to communicate with other nodes.\nMessages: ROS data type used when subscribing or publishing to a topic.\nTopics: Nodes can publish messages to a topic as well as subscribe to a topic to receive messages.\nDiscovery: The automatic process through which nodes determine how to talk to each other.\n\n\n\nNodes¶\nA node is a participant in the ROS graph.\nROS nodes use a ROS client library to communicate with other nodes.\nNodes can publish or subscribe to a Topic.\nNodes can also provide or use a Service.\nThere are configurable Parameters associated with a node.\nConnections between nodes are established through a distributed discovery process.\nNodes may be located in the same process, in different processes, or on different machines.\nThese concepts will be described in more detail in the sections that follow.\n\n\nClient Libraries¶\nROS client libraries allow nodes written in different programming languages to communicate.\nThere is a core ROS client library (RCL) that implements common functionality needed for the ROS APIs of different languages.\nThis makes it so that language-specific client libraries are easier to write and that they have more consistent behavior.\nThe following client libraries are maintained by the ROS 2 team:\n\nrclcpp = C++ client library\nrclpy = Python client library\n\nAdditionally, other client libraries have been developed by the ROS community.\nSee the ROS 2 Client Libraries article for more details.\n\n\nDiscovery¶\nDiscovery of nodes happens automatically through the underlying middleware of ROS 2.\nIt can be summarized as follows:\n\nWhen a node is started, it advertises its presence to other nodes on the network with the same ROS domain (set with the ROS_DOMAIN_ID environment variable).\nNodes respond to this advertisement with information about themselves so that the appropriate connections can be made and the nodes can communicate.\nNodes periodically advertise their presence so that connections can be made with new-found entities, even after the initial discovery period.\nNodes advertise to other nodes when they go offline.\n\nNodes will only establish connections with other nodes if they have compatible Quality of Service settings.\n\n\nExample: talker-listener¶\nIn one terminal, start a node (written in C++) that will publish messages on a topic.\nros2 run demo_nodes_cpp talker\n\n\nIn another terminal, start a second node (written in Python) that will subscribe to messages on the same topic.\nros2 run demo_nodes_py listener\n\n\nYou should see that these nodes discover each other automatically, and begin to exchange messages.\n\n\n"},{"id":55,"url":"/doc/ros2/Contributing/ROS-2-On-boarding-Guide/","title":"ROS 2 On-boarding Guide","content":"\nROS 2 On-boarding Guide¶\nThe purpose of this guide is supplement the on-boarding of new developers when they join the ROS 2 team.\nIt is mostly used by the ROS 2 team, but it might be useful for others as well.\n\nRequest access to the GitHub organizations¶\nOur code is federated across a few GitHub organizations, you’ll want access to them so you can make pull requests with branches rather than forks:\n\nhttps://github.com/ros2\nhttps://github.com/ament\nhttps://github.com/osrf (optional, as-needed)\n\n\n\nRequest access to the buildfarm¶\nThe build farm is hosted at: ci.ros2.org\nTo request access send an email to ros@osrfoundation.org.\n\nHow to give access?¶\nYour GitHub username must be added with the same permissions as existing users to Jenkins (http://ci.ros2.org/configureSecurity/).\nThis can be done by any existing user.\n\n\nHow to access the machines running the ci.ros2.org?¶\nOnly do this if you’re working at OSRF or if you’re asked to log into the machines.\nTo be able to ssh into the node hosted on AWS, you need give request access from Tully Foote (tfoote@osrfoundation.org).\n\n\n\nRequest access to the Google drive ROS2 folder¶\nOnly do this if you’re working at OSRF or need access to a particular document.\nTo request access send an email to ros@osrfoundation.org (anybody on the mailing list can share it).\n\n\nChoose a DDS domain ID¶\nROS2 uses DDS as the underlying transport and DDS supports a physical segmentation of the network based on the “domain ID” (it is used to calculate the multicast port.\nWe use a unique value for this on each machine to keep our ROS2 nodes from interfering from each other.\nWe expose this setting via the ROS_DOMAIN_ID environment variable and use a document to ensure we don’t accidentally choose the same one as someone else.\nThis is, however, only important for people who will be working on the OSRF network, but it isn’t a bad idea to set up at any organization with multiple ROS 2 users on the same network.\n\nGet a Personal ROS_DOMAIN_ID¶\nGo to the ROS 2 Assigned Domain ID’s Spreadsheet and reserve an ID, or email ros@osrfoundation.org and ask for one to be allocated to you.\nNumbers under 128 are preferred.\nTo ensure it is always set, add this line to your ~/.bashrc or equivalent:\nexport ROS_DOMAIN_ID=<your_domain_id>\n\n\n\n\n\nWatching ROS 2 Repositories¶\nWe try to spread our responsibilities out across the team and so we ask everyone to watch the main repositories for ROS 2.\n\nWhat am I currently watching?\nhttps://github.com/watching\n\n\nHow do I watch a repository?\nhttps://help.github.com/articles/watching-repositories/\n\n\nWhich repositories should I watch?\nAll the repositories listed in the ros2.repos file, included the commented out ones,\nAlso all of these extra repositories from the ROS 2 organization:\nhttps://github.com/ros2/ci\nhttps://github.com/ros2/design\nhttps://github.com/ros2/ros_astra_camera\nhttps://github.com/ros2/ros_core_documentation\nhttps://github.com/ros2/ros2\nhttps://github.com/ros2/sros2\nhttps://github.com/ros2/turtlebot2_demo\nhttps://github.com/ros2/joystick_drivers\n\n\n\n\n\n\n\nDeveloper Workflow¶\nWe track all open tickets and current PRs using waffle.io: https://waffle.io/ros2/ros2\nHigher level tasks are tracked on the internal (private) Jira: https://osrfoundation.atlassian.net/projects/ROS2\nThe usual workflow is (this list is a work in progress):\n\nDiscuss design (GitHub ticket, and a meeting if needed)\nAssign implementation to a team member\nWrite implementation on a feature branch\nPlease check out the developer guide for guidelines and best practices\n\n\nWrite tests\nEnable and run linters\nRun tests locally using colcon test (see colcon tutorial)\nOnce everything builds locally without warnings and all tests are passing, run CI on your feature branch:\nGo to ci.ros2.org\nLog in (top right corner)\nClick on the ci_launcher job\nClick “Build with Parameters” (left column)\nIn the first box “CI_BRANCH_TO_TEST” enter your feature branch name\nHit the build button\n\n\nIf built without warnings, errors and test failures, post the links of your jobs on your PR or high level ticket aggregating all your PRs (see example here)\nNote that the markdown for these badges is in the console output of the ci_launcher job\n\n\nTo get the PR reviewed, you need to put the label “in review”:\nThrough github interface:\nClick on “” next to labels\nRemove “in progress” label if applicable\nAdd “in review” label\n\n\nThrough waffle:\nDrag your PR to the “in review” column\n\n\n\n\nWhen the PR has been approved:\nthe person who submitted the PR merges it using “Squash and Merge” option so that we keep a clean history\nIf the commits deserve to keep separated: squash all the nitpick/linters/typo ones together and merge the remaining set\nNote: each PR should target a specific feature so Squash and Merge should make sense 99% of the time\n\n\n\n\n\n\nDelete the branch once merged\n\n\n\nWaffle.io How-to¶\nHere are some tips on how to use our Kanban board on waffle.io:\n\nAssigning labels: drag and drop cards to the column with the label you want to assign\nConnecting Issues/PR: Waffle allows to connect cards together using keywords\nNote1: The keywords need to be placed in the 1st comment of the GitHub ticket\nNote2: Waffle uses the “simplified” GitHub reference and not the full URL to connect card.\nDoes not work:\n“connects to https://github.com/ros2/rosidl/issues/216“\n\n\nWorks:\nIn the same repo: “connects to #216”\nIn another repo: “connects to ros2/rosidl#216”\n\n\n\n\n\n\n\n\n\nBuild Farm Introduction¶\nThe build farm is located at ci.ros2.org.\nEvery night we run nightly jobs which build and run all the tests in various scenarios on various platforms.\nAdditionally, we test all pull requests against these platforms before merging.\nThis is the current set of target platforms and architectures, though it evolves overtime:\n\nUbuntu 16.04 Xenial\namd64\naarch64\n\n\nmacOS 10.12 Sierra\namd64\n\n\nWindows 10\namd64\n\n\n\nThere several categories of jobs on the buildfarm:\n\nmanual jobs (triggered manually by developers):\nci_linux: build + test the code on Ubuntu Xenial\nci_linux-aarch64: build + test the code on Ubuntu Xenial on an ARM 64-bit machine (aarch64)\nci_osx: build + test the code on MacOS 10.12\nci_windows: build + test the code on Windows 10\nci_launcher: trigger all the jobs listed above\n\n\nnightly (run every night):\nDebug: build + test the code with CMAKE_BUILD_TYPE=Debug\nnightly_linux_debug\nnightly_linux-aarch64_debug\nnightly_osx_debug\nnightly_win_deb\n\n\nRelease: build + test the code with CMAKE_BUILD_TYPE=Release\nnightly_linux_release\nnightly_linux-aarch64_release\nnightly_osx_release\nnightly_win_rel\n\n\nRepeated: build then run each test up to 20 times or until failed (aka flakyness hunter)\nnightly_linux_repeated\nnightly_linux-aarch64_repeated\nnightly_osx_repeated\nnightly_win_rep\n\n\nCoverage:\nnightly_linux_coverage: build + test the code + analyses coverage for c/c++ and python\nresults are exported as a cobertura report\n\n\n\n\n\n\npackaging (run every night, against fastrtps; result is bundled into an archive):\npackaging_linux\npackaging_osx\nPackaging_windows\n\n\n\n\n\nLearning ROS2 concepts at a high level¶\nAll ROS2 design documents are available at http://design.ros2.org/ and there is some generated documentation at http://docs.ros2.org/.\n\n\n"}]