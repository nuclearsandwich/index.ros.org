[{"id":68,"url":"/doc/ros2/Concepts/About-Quality-of-Service-Settings/","title":"About Quality of Service Settings","content":"\nAbout Quality of Service Settings¶\n\nOverview¶\nROS 2 offers a rich variety of Quality of Service (QoS) policies that allow you to tune communication between nodes.\nWith the right set of Quality of Service policies, ROS 2 can be as reliable as TCP or as best-effort as UDP, with many, many possible states in between.\nUnlike ROS 1, which primarily only supported TCP, ROS 2 benefits from the flexibility of the underlying DDS transport in environments with lossy wireless networks where a “best effort” policy would be more suitable, or in real-time computing systems where the right Quality of Service profile is needed to meet deadlines.\nA set of QoS “policies” combine to form a QoS “profile”.\nGiven the complexity of choosing the correct QoS policies for a given scenario, ROS 2 provides a set of predefined QoS profiles for common usecases (e.g. sensor data).\nAt the same time, users are given the flexibility to control specific profiles of the QoS policies.\nQoS profiles can be specified for publishers, subscribers, service servers and clients.\nA QoS profile can be applied independently to each instance of the aforementioned entities, but if different profiles are used it is possible that they will not connect.\n\n\nQoS policies¶\nThe base QoS profile currently includes settings for the following policies:\n\nHistory\nKeep last: only store up to N samples, configurable via the queue depth option.\nKeep all: store all samples, subject to the configured resource limits of the underlying middleware.\n\n\nDepth\nSize of the queue: only honored if used together with “keep last”.\n\n\nReliability\nBest effort: attempt to deliver samples, but may lose them if the network is not robust.\nReliable: guarantee that samples are delivered, may retry multiple times.\n\n\nDurability\nTransient local: the publisher becomes responsible for persisting samples for “late-joining” subscribers.\nVolatile: no attempt is made to persist samples.\n\n\n\nFor each of the policies there is also the option of “system default”, which uses the default of the underlying middleware which may be defined via DDS vendor tools (e.g. XML configuration files).\nDDS itself has a wider range of policies that can be configured.\nThese policies have been exposed because of their similarity to features in ROS 1; it is possible that in the future more policies will be exposed in ROS 2.\n\nComparison to ROS 1¶\nThe history and depth policies in ROS 2 combine to provide functionality akin to the queue size in ROS 1.\nThe reliability policy in ROS 2 is akin to the use of either UDPROS (only in roscpp) for “best effort”, or TCPROS (ROS 1 default) for reliable.\nNote however that even the reliable policy in ROS 2 is implemented using UDP, which allows for multicasting if appropriate.\nThe durability policy combined with a depth of 1 provides functionality similar to that of “latching” subscribers.\n\n\n\nQoS profiles¶\nProfiles allow developers to focus on their applications without worrying about every QoS setting possible.\nA QoS profile defines a set of policies that are expected to go well together for a particular use case.\nThe currently-defined QoS profiles are:\n\nDefault QoS settings for publishers and subscribers\nIn order to make the transition from ROS 1 to ROS 2, exercising a similar network behavior is desirable.\nBy default, publishers and subscribers are reliable in ROS 2, have volatile durability, and “keep last” history.\n\nServices\nIn the same vein as publishers and subscribers, services are reliable.\nIt is especially important for services to use volatile durability, as otherwise service servers that re-start may receive outdated requests.\nWhile the client is protected from receiving multiple responses, the server is not protected from side-effects of receiving the outdated requests.\n\nSensor data\nFor sensor data, in most cases it’s more important to receive readings in a timely fashion, rather than ensuring that all of them arrive.\nThat is, developers want the latest samples as soon as they are captured, at the expense of maybe losing some.\nFor that reason the sensor data profile uses best effort reliability and a smaller queue depth.\n\nParameters\nParameters in ROS 2 are based on services, and as such have a similar profile.\nThe difference is that parameters use a much larger queue depth so that requests do not get lost when, for example, the parameter client is unable to reach the parameter service server.\n\nSystem default\n\nThis uses the system default for all of the policies.\n\n\n\nClick here for the specific policies in use for the above profiles.\nThe settings in these profiles are subject to further tweaks, based on the feedback from the community.\nWhile ROS 2 provides some QoS profiles for common use cases, the use of policies that are defined in DDS allows ROS users to take advantage of the vast knowledge base of existing DDS documentation for configuring QoS profiles for their specific use case.\n\n\nQoS compatibilities¶\nNote: This section refers to publisher and subscribers but the content applies to service servers and clients in the same manner.\nQoS profiles may be configured for publishers and subscribers independently.\nA connection between a publisher and a subscriber is only made if the pair has compatible QoS profiles.\nQoS profile compatibility is determined based on a “Request vs Offerer” model, wherein connections are only made if the requested policy of the subscriber is not more stringent than the that of the publisher.\nThe less strict of the two policies will be the one used for the connection.\nThe QoS policies exposed in ROS 2 that affect compatibility are the durability and reliability policies.\nThe following tables show the compatibility of the different policy settings and the result:\nCompatibility of QoS durability profiles:\n\n\n\n\n\n\n\n\nPublisher\nSubscriber\nConnection\nResult\n\n\n\nVolatile\nVolatile\nYes\nVolatile\n\nVolatile\nTransient local\nNo\n\n\n\n\n\nTransient local\nVolatile\nYes\nVolatile\n\nTransient local\nTransient local\nYes\nTransient local\n\n\n\nCompatibility of QoS reliability profiles:\n\n\n\n\n\n\n\n\nPublisher\nSubscriber\nConnection\nResult\n\n\n\nBest effort\nBest effort\nYes\nBest effort\n\nBest effort\nReliable\nNo\n\n\n\n\n\nReliable\nBest effort\nYes\nBest effort\n\nReliable\nReliable\nYes\nReliable\n\n\n\nIn order for a connection to be made, all of the policies that affect compatibility must be compatible.\nThat is, even if a publisher-subscriber pair has compatible reliability QoS profiles, if they have incompatible durability QoS profiles a connection will not be made, and vice-versa.\n\n\n"},{"id":69,"url":"/doc/ros2/Tutorials/Eclipse-Oxygen-with-ROS-2-and-rviz2/","title":"Eclipse Oxygen with ROS 2 and rviz2 [community-contributed]","content":"\nEclipse Oxygen with ROS 2 and rviz2 [community-contributed]¶\n\nTable of Contents\n\nSetup\nEclipse-indexer\nDebugging with eclipse\n\n\n\nSetup¶\nWe have installed eclipse Oxygen and git. eclipse-git (Egit) is already installed (http://www.eclipse.org/egit/download/).\nWe call the eclipse-workspace the same name as the ros2 package. This is not needed.\nHINT: We use nested projects and so using one eclipse-workspace for one ROS-2 package, because there are many projects inside even if its one ROS-2 project, it seemed more “clean”.\n\nWe create a C++ Project\n\n\nWe choose as Project-name the name of the ROS 2 package. Makefile Project and Other Toolchain.\n\nThen we click on Finish\n\nIn the “Project explorer” we see our Project.\n\nInside our Project we create a folder called “src”\n\nNow we import a git repository\n\nWe put in the repository URL\n\nIMPORTANT: As destination-folder for the git-repository we use the src-folder of our project we created before.\nHINT: If you got problems choosing the destination folder path, the eclipse-dialog needs a name in the name field.\n\nImport using the new project wizard\n\nWe create a General->Project\n\nUse as project name the same name as the git-repository. This is not needed.\nIMPORTANT: Use as “Location” the folder we cloned the git repository in.\n\nNow we see the git-project and our project in the Project-Explorer view. We see the same files two times, but only one project is linked with Egit.\n\nWe repeat this procedure again. Import git repository pluginlib\n\nIMPORTANT: As “Destination->Directory” we use a folder inside the src-folder.\n\nIMPORTANT: As location for our new project we use the folder we cloned the git repository in\n\nThe same procedure again. Now with tinyxml2_vendor git repository.\n\nIMPORTANT: Again we use a folder inside the src-folder\n\nIMPORTANT: Use as new project folder the location of the folder we cloned.\n\nNow we see all 4 Projects in the Project-Explorer view.\n\nIf we click in the top-right-corner of the Project-Explorer view we can change the Project-Presentation to Hirachical view. Now it looks like a ROS-2 project as it is on hard-drive. But this view is not good, as the linkage to Egit gets lost. So use the Flat Project-Presentation. The Egit linkage is good if you want to see e.g. which author wrote which code-line, etc.\n\nWe go to “C/C++ build”-section and put “ament” into “Build command”\n\nGo to “Behavior” tab and unselect “clean” and put “build” into Build textbox.\n\nBefore you can “Build Project” you need to close eclipse. Open a shell and source the ROS-2 setup.bash file, then cd into the directory of the eclipse project (here: /home/ubu/rviz2_ws/rviz2_ws) and start eclipse from inside this directory.\n\nNow you can use code-completion, egit annotations, eclipse C/C++ Tools, etc.\n\n\n\nEclipse-indexer¶\nIf you open e.g. main.cpp of rviz2 you will perhaps see alot of “unresolved inclusion”.You need todo the following that they disappear and that right-click->Open-Declaration will fully work. Goto Project->Properties->C++General->Path-and-Symbols and to tab References and select “ros2_ws”.\nIMPORTANT: If you have different eclipse-workspaces for ros2_ws and e.g. rviz2_ws, you can add your ros2_ws the same way as later the qt5 directory get added. Hint: Just add the src folder, e.g. /home/ros/ros2_ws/ros2_ws/src  not the build and install directories.\n\nGoto C/C++-General->Path-and-Symbols to tab “Source locations” and click on “Link folder”. There choose the location of qt5 includes.\n\nthen you see something like the next image. You could also add “excludes” (filters) to the added source locations, so that some directories dont get indexed. Its good for the “build” and “install” directories in the rviz2_ws which include duplicate headers.\n\nGoto C++General->Preprocessor includes, select CDT-GCC-Built-in-compiler-settings[shared] and enter into the text-box “command to get compiler specs” the following\n-std=c++14\n\n\n\nThen goto “C/C++-General->Indexer” and select the following in the image. E.g “index unused headers as c files” is to resolve e.g. QApplication, because the QApplication headers content is only “#include “qapplication.h”.\n\nAfter running the indexer (which happens later,so you will see this also later), you can see what it added\n\nAfter that right-click on the rviz2 project and select “Indexer->Rebuild”, after that, you see down-right a progress, you will see that it can resolve all includes.\n\n\n\nDebugging with eclipse¶\nGoto “C/C++-Build” and add to the build command\n-DCMAKE_BUILD_TYPE=Debug\n\n\n\nThen in eclipse goto “Run->Debug Configurations” and add the following and click on “Debug”\n\n\n\n"},{"id":70,"url":"/doc/ros2/Contributing/Build-Cop-and-Build-Farmer-Guide/","title":"Build Cop and Build Farmer Guide","content":"\nBuild Cop and Build Farmer Guide¶\n\nTable of Contents\n\nOn-boarding\nRetirement\nBuild Cop\nMission\nBuild Cop Tasks\n\n\nBuild Farmer\nMission\nBuild Farmer Tasks\nResources\n\n\n\n\nThis page covers two rotating developer roles we have on the ROS 2 team, the build cop and the build farmer.\nThese two roles are related, but subtly different.\nThe build cop is responsible for monitoring our Continuous Integration (CI) server to make sure our “nightly” jobs and “packaging” jobs do not accumulate new regressions.\nThis allows us to build on relatively stable “ci” (or “manual”) jobs when checking to see if a new feature or bug fix introduces any new regressions.\nThe build farmer, on the other hand, is responsible for ensuring that the machines that run all of our CI jobs are up, running, and up-to-date, so that they are available for other developers to check their pull requests.\nThese two jobs have so far been the same person for periods of about two weeks, but they are separated here so that they could be different people in the future and to make a distinction between the roles and responsibilities.\nThis document is meant mostly for ROS 2 team developers, but it might be useful for others too.\n\nOn-boarding¶\nIf you are becoming the next build cop or build farmer you should:\n\nMake sure you are subscribed to and have the “deliver every email” option turned on for this mailing list:\nhttps://groups.google.com/forum/#!forum/ros2-buildfarm\n\n\nMake sure you are “watching” this GitHub repository:\nhttps://github.com/ros2/build_cop\n\n\nTalk with the previous build cop and/or build farmer about on-going issues\nUpdate the description of the main view on Jenkins to the current date and your name:\nhttp://ci.ros2.org/\n\n\n\n\n\nRetirement¶\nIf you are finishing your stint as either build cop or build farmer you should:\n\nUnsubscribe or switch to “digest” for this mailing list:\nhttps://groups.google.com/forum/#!forum/ros2-buildfarm\n\n\n“Unwatch” this GitHub repository:\nhttps://github.com/ros2/build_cop\n\n\nSummarize the on-going issues for the next build cop or build farmer to which you are handing off\n\n\n\nBuild Cop¶\nThis section assumes that you have reviewed the ROS 2 on boarding document.\n\nMission¶\nThe goal of the build cop is to keep the jobs “green” (succeeding without test failures or warnings) on the buildfarm and to report any regression to the appropriate person.\nThis will reduce the overhead of several people looking at, or investigating, the same build failures.\nThis will also allow the other people on the team not to receive nightly email for the failing and/or unstable builds.\n\n\nBuild Cop Tasks¶\nEvery morning the build cop should go through all the nightly jobs and packaging jobs and act on new failing or unstable jobs.\nThe “ci” jobs, which are started manually by developers, are not the responsibility of the build cop unless all “ci” are failing, which would indicate something was merged to the default branches which is broken.\nHow to classify and deal with new failures is described in the next section.\nAdditionally, the build cop should strive to keep track of existing issues which are either preexisting or cannot be resolved with a day or so.\nIssues are tracked on this repository which only the build cop must be “watching” (getting GitHub notifications), though anyone interested can follow it too:\nhttps://github.com/ros2/build_cop/issues\nThe above repository is also used to track Build Farmer issues.\nIt is meant to be a way for the build cop or build farmer to track long running items for handing off to the next person and so they can “mention” individuals on particular issues without the whole team getting notified of every issue.\n\nTypes of Failures¶\nEach failure can be categorized into one of a few classifications:\n\nNode failure:\nfailures which appear to be due to a machine configuration and not a code change\npass it on to the build farmer\n\n\nTrivial failure:\nLinter failure\nNew warnings\n\n\nCritical failure:\nBreaking builds on the “default” branch\nRegression (existing tests which were passing are now failing)\nNew tests that are failing (never were passing)\n\n\nImportant failure:\nNew feature which is not fully covered by tests\nIncrease flakiness (new flaky tests or made existing flaky tests more flaky)\n\n\n\n\n\nNew Failure Actions¶\nIn each case different actions should be taken by the build cop:\n\nTrivial failure should be fixed by the Build Cop right away:\nPushed on a branch\nTested on CI\nMerged to the default branch\nAdd a comment to the PR introducing the failure referencing the fixing commit\n\n\nCritical failures:\nFailure should be reported on the PR introducing it by tagging the submitter and the reviewer that +1’d it.\nSubmitter of the PR has to act on it during the next half day by either:\nReverting the change and ticketing the problem / comment on the PR the reason it’s been reverted\nSubmit a patch to fix the failure\n\n\n\n\nImportant failures:\nFailure should be reported on the PR introducing it by tagging the submitter + the reviewer the +1’d it.\nSubmitter has to either:\nAddress it the same week\nAdd it to the next sprint\n\n\n\n\n\n\n\nTips¶\n\nYou can search for PRs merged between two dates with, e.g.:\nhttps://github.com/search?utf8=%E2%9C%93&q=user%3Aament+user%3Aros2+merged%3A%222017-04-17T22%3A00%3A00-08%3A00+..+2017-04-18T23%3A30%3A00-08%3A00%22&type=Issues\n(note that FastRTPS and other external repos won’t appear)\n\n\nTo get the exact list of code that changed, generate a diff between the output of vcs export --exact between two builds.\nThis is particularly useful for external repos such as FastRTPS where old commits may get pushed to the master branch overnight, and are difficult to spot in the GitHub UI.\n\n\nTimes displayed at the top of jenkins jobs are in UTC. You can convert the times with e.g.:\nhttps://www.google.com/webhp?sourceid=chrome-instant&ion=1&espv=2&ie=UTF-8#q=when+it’s+9:25:12+PM+UTC+time+pst\n\n\nIf linter failures occur overnight it is usually because of a new version of a linter.\nCreate a diff of the last pip freeze output of two builds to see which versions changed.\nIf it’s a regression in a dependency you can pin the older version temporarily, see this PR for an example.\n\n\n\n\n\n\n\nBuild Farmer¶\nThis section assumes that you have reviewed the ROS 2 on boarding document.\n\nMission¶\nThe mission of the build farmer is to keep the build farm in a healthy, up-to-date state.\nIdeally all Jenkins nodes will have the same/latest version of every package.\nThis will require monitoring and patching up any node when things come up.\n\n\nBuild Farmer Tasks¶\n\nMonitor the buildfarm (using the https://groups.google.com/forum/#!forum/ros2-buildfarm mailing list for email notifications)\nTake failing nodes off-line with descriptive message about the issue and investigate the failure ASAP.\nTaking a node off-line:\nlog in ci.ros2.org\nclick on the node in the left column of Jenkins UI (e.g. osx_slave_mini1)\nclick on “Mark this node temporary off-line” button (top right corner)\n\n\nInvestigate the failure (see section below)\n\n\nReport error and fixing attempt using the Build Farmer Reporting Form\nIf the same problem and action is taken on multiple nodes, select all the relevant nodes in the form before submitting it\n\n\nIf fixing attempt failed:\nKeep the node off-line on the farm\nUpdate the reason for node being off-line\nPut the status and error message in the status sheet of the logbook\nAllocate time in the next few days to dive in the problem\n\n\nIf you rescue a previously off-line node:\nUpdate the status sheet of the logbook by:\nRemoving the error message in the status column\nUpdate the date next to it\n\n\n\n\nOnce investigation is finished, clean the machine: close all your windows, stash or remove any local changes\nRationale\nAnybody logging into the machine need to know that no one is working on it\nIf the machine reboots the machine needs to be in an operational state without local changes\n\n\n\n\nMaking sure install instructions are up to date\nUse the existing logbook to put together an FAQ or best practice to rescue nodes\n\n\nHow to Investigate a Failing Node¶\nIf the node failed to build, look at the console output of the failing build:\n\nClick on the link of the failing job received by email or go to ci.ros2.org and click on the number (e.g. #2345) next to the failing job(red icon).\nClick on Console Output in the left column\nLook for the reason of the failure\nIf the failure is not due to a machine configuration, relay to the build cop\n\nIf you need to access a machine:\n\nSee this spreadsheet (private) for credentials for all the different Jenkins Nodes:\nFor machines hosted at OSRF, you’ll need to be on the OSRF network or have a VPN connection.\nFor machines which require ssh keys ask on ros@osrfoundation.org for your public keys to be added.\nThe Packet.net nodes (with “packet” in the name):\nCan be managed by logging in at https://packet.net with <brian’s email address>/<the usual company password>\nThis will change after we set up a team account to manage servers.\n\n\nCan be accessed with Tully’s or Brian’s ssh key.\nThis will change after we set up a team account to manage servers.\n\n\n\n\n\n\n\nTroubleshooting¶\nIf a node goes off-line:\n\nFor machines with VNC, you should try that first because many failures can be due to pop-up windows or required updates\nIf you don’t have any pop-ups and relaunching the jenkins client doesn’t fix it, then you’ll have to start troubleshooting.\nLooking at configuration difference between the nodes may be useful (java version, pip freeze, etc.)\nFor Linux nodes that have gone off-line (e.g. because of a reboot), they can be reconnected through the Jenkins web interface of that node\n\nOther tips:\n\nThe environment variables on Windows machines are output at the beginning of Jenkins jobs (search for ==> set).\nIf you are modifying environment variables on Windows nodes, you may need to restart the machine before the changes are reflected in the jobs.\nThis is due to the Jenkins slave session caching the environment variables to some degree.\n\nOn the Windows machines, the Jenkins slave program runs as a service as the System account.\nFor this user, the “home” directory seems to be C:\\Windows\\system32\\config\\systemprofile.\nYou can “become” the system user to debug stuff by downloading pxexec:\nhttps://technet.microsoft.com/en-us/sysinternals/pxexec\nThen you extract the zip, then open a command-prompt as administrator, and then run psexec -i -s cmd.exe.\nThis is all pieced together from a couple of pages here:\nhttp://blog.thomasvandoren.com/jenkins-windows-slave-with-git.html\nand here:\nhttps://answers.atlassian.com/questions/128324/where-is-the-home-directory-for-the-system-user\n\nEvery so often the router reboots. The mac machines usually don’t reconnect to Jenkins properly. Just manually reconnect them.\n\n\n\nResources¶\n\n\nHow to setup the Jenkins master\n\n\nHow to setup Linux Jenkins nodes\n\n\nHow to setup a macOS Jenkins node\n\n\nHow to setup a Windows Jenkins node\n\n\n\n\n\n\n\n"},{"id":71,"url":"/doc/ros2/Installation/Install-Connext-Security-Plugins/","title":"Installing Connext security plugins","content":"\nInstalling Connext security plugins¶\nThe Connext DDS Libraries are included with ROS2 under a non-commercial\nlicense and do not include the security\nplug-in libraries. These libraries are available in the commercial,\nuniversity and research license versions of RTI Connext DDS Pro, which\nis bundled with tools for system debugging, monitoring, record/replay,\netc.\nA video walk-thru of this installation (tools and security plug-ins) is\navailable\nhere at\nthe RTI website. The steps are:\nInstall Connext DDS Pro (Host)\nThis is a host-specific installer application (for Windows, Linux, MacOS) to install a ‘Host’ bundle which includes the Launcher, tools, and other software services.\nAt the end of the installation, the RTI ‘Launcher’ program will be started.\nThe Launcher is used to install target libraries, security plugins, and other layered services.\nUse the Package Installer in Launcher\n\n\nLauncher Image\n\nThe ‘RTI Package Installer’ is used to install ‘.rtipkg’ files – target\nlibraries, security plug-ins, etc. Open the Package Installer and select\nall of the .rtipkg files that were included in the Connext DDS Secure\nbundle for installation:\n\n\nTarget Libraries - such as: rti_connext_dds-[version]-pro-target-[toolchain].rtipkg\nSecurity Plugin Host - such as: rti_security_plugins-[version]-host-[toolchain].rtipkg\nSecurity Plugin Target - such as: rti_security_plugins-[version]-target-[toolchain].rtipkg\nOpenSSL Host - such as: openssl-1.0.2x-[version]-host-[toolchain].rtipkg\n\n\nExtract and Install OpenSSL\nThis is included as an archive (.zip or\notherwise) and can be simply extracted and copied to a convenient\nlocation on your host computer. As a suggestion, this could also be\ninstalled into the ‘rti_connext_dds-[version]’ directory in your home\ndirectory space (this was created during installation of the RTI host\ntools). Note: this directory location may need to be placed in your PATH\nenvironment variable.\nInstallation complete.\n\n"}]