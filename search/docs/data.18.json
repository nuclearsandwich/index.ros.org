[{"id":72,"url":"/doc/ros2/Tutorials/Rosbag-with-ROS1-Bridge/","title":"Recording and playback of topic data with rosbag using the ROS 1 bridge","content":"\nRecording and playback of topic data with rosbag using the ROS 1 bridge¶\nThis tutorial is a follow up to the Bridge communication between ROS 1 and ROS 2 demo as can be found listed with the other demos, and in the following it is assumed you have completed that tutorial already.\nThe ros1_bridge can either be installed from binary packages or built from source; both work for these examples.\nWhat follows is a series of additional examples, like that ones that come at the end of the aforementioned Bridge communication between ROS 1 and ROS 2 demo.\n\nRecording topic data with rosbag and ROS 1 Bridge¶\nIn this example, we’ll be using the cam2image demo program that comes with ROS 2 and a Python script to emulate a simple turtlebot-like robot’s sensor data so that we can bridge it to ROS 1 and use rosbag to record it.\nFirst we’ll run a ROS 1 roscore in a new shell:\n# Shell A:\n. /opt/ros/kinetic/setup.bash\n# Or, on OSX, something like:\n# . ~/ros_catkin_ws/install_isolated/setup.bash\nroscore\n\n\nThen we’ll run the ROS 1 <=> ROS 2 dynamic_bridge with the --bridge-all-topics option (so we can do rostopic list and see them) in another shell:\n# Shell B:\n. /opt/ros/kinetic/setup.bash\n# Or, on OSX, something like:\n# . ~/ros_catkin_ws/install_isolated/setup.bash\n. /opt/ros/ardent/setup.bash\n# Or, if building ROS2 from source:\n# . <workspace-with-bridge>/install/setup.bash\nexport ROS_MASTER_URI=http://localhost:11311\nros2 run ros1_bridge dynamic_bridge --bridge-all-topics\n\n\nRemember to replace <workspace-with-bridge> with the path to where you either extracted the ROS 2 binary or where you built ROS 2 from source.\n\nNow we can start up the ROS 2 programs that will emulate our turtlebot-like robot.\nFirst we’ll run the cam2image program with the -b option so it doesn’t require a camera to work:\n# Shell C:\n. /opt/ros/ardent/setup.bash\n# Or, if building ROS2 from source:\n# . <workspace-with-bridge>/install/setup.bash\nros2 run image_tools cam2image -- -b\n\n\nTODO: use namespaced topic names\nThen we’ll run a simple Python script to emulate the odom and imu_data topics from a Kobuki base.\nI would use the more accurate ~sensors/imu_data topic name for the imu data, but we don’t have namespace support just yet in ROS 2 (it’s coming!).\nPlace this script in a file called emulate_kobuki_node.py:\n#!/usr/bin/env python3\n\nimport sys\nimport time\n\nimport rclpy\n\nfrom nav_msgs.msg import Odometry\nfrom sensor_msgs.msg import Imu\n\ndef main():\n    rclpy.init(args=sys.argv)\n\n    node = rclpy.create_node('emulate_kobuki_node')\n\n    imu_publisher = node.create_publisher(Imu, 'imu_data')\n    odom_publisher = node.create_publisher(Odometry, 'odom')\n\n    imu_msg = Imu()\n    odom_msg = Odometry()\n    counter = 0\n    while True:\n        counter += 1\n        now = time.time()\n        if (counter % 50) == 0:\n            odom_msg.header.stamp.sec = int(now)\n            odom_msg.header.stamp.nanosec = int(now * 1e9) % 1000000000\n            odom_publisher.publish(odom_msg)\n        if (counter % 100) == 0:\n            imu_msg.header.stamp.sec = int(now)\n            imu_msg.header.stamp.nanosec = int(now * 1e9) % 1000000000\n            imu_publisher.publish(imu_msg)\n            counter = 0\n        time.sleep(0.001)\n\n\nif __name__ == '__main__':\n    sys.exit(main())\n\n\nYou can run this python script in a new ROS 2 shell:\n# Shell D:\n. /opt/ros/ardent/setup.bash\n# Or, if building ROS2 from source:\n# . <workspace-with-bridge>/install/setup.bash\npython3 emulate_kobuki_node.py\n\n\n\nNow that all the data sources and the dynamic bridge are running, we can look at the available topics in a new ROS 1 shell:\n# Shell E:\n. /opt/ros/kinetic/setup.bash\n# Or, on OSX, something like:\n# . ~/ros_catkin_ws/install_isolated/setup.bash\nrostopic list\n\n\nYou should see something like this:\n% rostopic list\n/image\n/imu_data\n/odom\n/rosout\n/rosout_agg\n\n\nWe can now record this data with rosbag record in the same shell:\n# Shell E:\nrosbag record /image /imu_data /odom\n\n\nAfter a few seconds you can Ctrl-c the rosbag command and do an ls -lh to see how big the file is, you might see something like this:\n% ls -lh\ntotal 0\n-rw-rw-r-- 1 william william  12M Feb 23 16:59 2017-02-23-16-59-47.bag\n\n\nThough the file name will be different for your bag (since it is derived from the date and time).\n\n\nPlaying back topic data with rosbag and ROS 1 Bridge¶\nNow that we have a bag file you can use any of the ROS 1 tools to introspect the bag file, like rosbag info <bag file>, rostopic list -b <bag file>, or rqt_bag <bag file>.\nHowever, we can also playback bag data into ROS 2 using rosbag play and the ROS 1 <=> ROS 2 dynamic_bridge.\nFirst close out all the shells you opened for the previous tutorial, stopping any running programs.\nThen in a new shell start the roscore:\n# Shell P:\n. /opt/ros/kinetic/setup.bash\n# Or, on OSX, something like:\n# . ~/ros_catkin_ws/install_isolated/setup.bash\nroscore\n\n\nThen run the dynamic_bridge in another shell:\n# Shell Q:\n. /opt/ros/kinetic/setup.bash\n# Or, on OSX, something like:\n# . ~/ros_catkin_ws/install_isolated/setup.bash\n. /opt/ros/ardent/setup.bash\n# Or, if building ROS2 from source:\n# . <workspace-with-bridge>/install/setup.bash\nexport ROS_MASTER_URI=http://localhost:11311\nros2 run ros1_bridge dynamic_bridge --bridge-all-topics\n\n\nThen play the bag data back with rosbag play in another new shell, using the --loop option so that we don’t have to keep restarting it for short bags:\n# Shell R:\n. /opt/ros/kinetic/setup.bash\n# Or, on OSX, something like:\n# . ~/ros_catkin_ws/install_isolated/setup.bash\nrosbag play --loop path/to/bag_file\n\n\nMake sure to replace path/to/bag_file with the path to the bag file you want to playback.\n\nNow that the data is being played back and the bridge is running we can see the data coming across in ROS 2.\n# Shell S:\n. /opt/ros/ardent/setup.bash\n# Or, if building ROS2 from source:\n# . <workspace-with-bridge>/install/setup.bash\nros2 topic list\nros2 topic echo /odom\n\n\nYou should see something like:\n% ros2 topic list\n/clock\n/image\n/imu_data\n/odom\n/parameter_events\n\n\nYou can also see the image being played from the bag by using the showimage tool:\nros2 run image_tools showimage\n\n\n\n\n"},{"id":73,"url":"/doc/ros2/Tutorials/Releasing-a-ROS-2-package-with-bloom/","title":"Releasing a ROS 2 package with bloom","content":"\nReleasing a ROS 2 package with bloom¶\n\nTable of Contents\n\nIntroduction\nRequired Tools\n\nEnsure that you have the latest version of bloom and catkin_pkg\n\n\nNo differences from ROS 1 Bloom\nProcedure\nBuild Status\n\n\n\nIntroduction¶\nThis page describes how to prepare a repository for release on the public ROS 2 buildfarm. After you’ve created a package, this is the next step towards getting your package in to the publicly-available Debian packages (i.e., you will be able to install the package via apt). This page includes the ROS 2-specific instructions to execute before following the Bloom release tutorial on the ROS Wiki.\n\n\nRequired Tools¶\nFor ROS 2 Bouncy:\n\nbloom >= 0.6.6\ncatkin_pkg >= 0.4.5\n\nfor ROS 2 Crystal:\n\nbloom >= 0.6.9\ncatkin_pkg >= 0.4.5\n\n\nEnsure that you have the latest version of bloom and catkin_pkg¶\nSee above version requirements.\n\nMake sure you have the ros repositories in your sources (see instructions here).\nInstall the latest version of bloom and catkin_pkg:\nsudo apt install python-catkin-pkg python-bloom\n\n\n\n\nIf you’re using a version of bloom older than 0.6.8 you’ll need to use the v3 index url for releasing.\nexport ROSDISTRO_INDEX_URL='https://raw.githubusercontent.com/ros/rosdistro/master/index.yaml'\n\n\n\n\n\nNo differences from ROS 1 Bloom¶\nIf you’ve bloomed packages before in ROS 1, the ROS 2 process is exactly the same.\n\n\nProcedure¶\nSame as in ROS 1: Following this tutorial\nIf porting a ROS 1 package to ROS 2, it’s recommended to create a new -release repository.\n\n\nBuild Status¶\n\nIndividual build details on the build farm Jenkins frontend.\nThe ROS2 Package Status Pages (e.g. Bouncy-Default).\n\n\n\n"},{"id":74,"url":"/doc/ros2/Tutorials/Run-2-nodes-in-two-separate-docker-containers/","title":"Running 2 nodes in 2 separate docker containers [community-contributed]","content":"\nRunning 2 nodes in 2 separate docker containers [community-contributed]¶\nOpen a terminal. Run the image in a container in interactive mode and launch a topic publisher (executable talker from the package demo_nodes_cpp) with ros2 run:\ndocker run -it --rm osrf/ros2:ardent-basic ros2 run demo_nodes_cpp talker\n\n\nOpen a second terminal. Run the image in a container in interactive mode and launch a topic subscriber (executable listener from the package demo_nodes_cpp)  with ros2 run:\ndocker run -it --rm osrf/ros2:ardent-basic ros2 run demo_nodes_cpp listener\n\n\nAs an alternative to the command line invocation, you can create a docker-compose.yml file (here version 2) with the following (minimal) content:\nversion: '2'\n\nservices:\n  talker:\n    image: osrf/ros2:ardent-basic\n    command: ros2 run demo_nodes_cpp talker\n  listener:\n    image: osrf/ros2:ardent-basic\n    command: ros2 run demo_nodes_cpp listener\n    depends_on:\n      - talker\n\n\nTo run the containers call docker-compose up in the same directory. You can close the containers with Ctrl+C.\n\n"},{"id":75,"url":"/doc/ros2/Tutorials/Run-2-nodes-in-a-single-docker-container/","title":"Running 2 nodes in a single docker container [community-contributed]","content":"\nRunning 2 nodes in a single docker container [community-contributed]¶\nPull the ROS2 docker image with tag “ardent-basic”.\ndocker pull osrf/ros2:ardent-basic\n\n\nRun the image in a container in interactive mode.\n$ docker run -it osrf/ros2:ardent-basic\nroot@<container-id>:/#\n\n\nYour best friend is the ros2 command line help now.\nroot@<container-id>:/# ros2 --help\n\n\nE.g. list all installed packages.\nroot@<container-id>:/# ros2 pkg list\n(you will see a list of packages)\n\n\nE.g. list all executables:\nroot@<container-id>:/# ros2 pkg executables\n(you will see a list of <package> <executable>)\n\n\nRun a minimal example of 2 C++ nodes (1 topic subscriber listener, 1 topic publisher talker) from the package demo_nodes_cpp in this container:\nros2 run demo_nodes_cpp listener &\nros2 run demo_nodes_cpp talker\n\n\n\n"}]