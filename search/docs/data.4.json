[{"id":16,"url":"/doc/ros2/Releases/Beta3-Overview/","title":"Beta 3 (codename ‘r2b3’; September 2017)","content":"\nBeta 3 (codename ‘r2b3’; September 2017)¶\n\nTable of Contents\n\nSupported Platforms\nFeatures\n\nImprovements since Beta 2 release\nNew demo application\nSelected features from previous Alpha/Beta releases\n\n\nKnown issues\n\n\n\nSupported Platforms¶\nWe support ROS 2 Beta 3 on three platforms: Ubuntu 16.04 (Xenial), Mac OS X 10.12 (Sierra), and Windows 10.\nWe provide both binary packages and instructions for how to compile from source for all 3 platforms (see install instructions as well as documentation).\n\n\nFeatures¶\n\nImprovements since Beta 2 release¶\n\nExecution model in Python, many fixes to memory management in Python C extension\nExperimental rewrite of ros_control\nExposure of DDS implementation-specific symbols to users (for FastRTPS and Connext) (see example)\nLogging API in Python\nFixed several memory leaks and race conditions in various packages\nReadded support for OpenSplice (on Linux and Windows atm) provided by PrismTech\nUse bloom (without patches) to make ROS 2 releases\n\n\n\nNew demo application¶\n\nHSR demo\n\nRemote control a HSR robot using a ROS 2 joystick controller\nRunning the ros1_bridge in a Docker container on the HSR (since the robot is running ROS 1 on Ubuntu Trusty)\nRun a ROS 2 development version of rviz to visualize sensor data from the robot etc. (see video)\n\n\n\n\n\nSelected features from previous Alpha/Beta releases¶\nFor the complete list, see earlier release notes.\n\nC++ and Python implementations of ROS 2 client libraries including APIs for:\n\nPublishing and subscribing to ROS topics\nRequesting and replying ROS services (synchronous (C++ only) and asynchronous)\nGetting and setting ROS parameters (C++ only, synchronous and asynchronous)\nTimer callbacks\n\n\nSupport for interoperability between multiple DDS/RTPS implementations\n\neProsima FastRTPS is our default implementation, and is included in the binary packages\nRTI Connext is supported: build from source to try it out\nPrismTech OpenSplice: see limitations below\n\n\nA graph API for network events\nDistributed discovery\nRealtime safe code paths for publish and subscribe with compatible DDS implementation (only Connext at the moment)\n\nSupport for custom allocators\n\n\nROS 1 <-> ROS 2 dynamic bridge node\nExecutor threading model (C++ and Python)\nComponent model to compose nodes at compile / link / runtime\nManaged component using a standard lifecycle\nExtended .msg format with new features:\n\nBounded arrays\nDefault values\n\n\n\n\n\n\nKnown issues¶\n\nOn Windows Python launch files might hang when trying to abort using Ctrl-C (see issue). In order to continue using the shell which is blocked by the hanging command you might want to end the hanging Python process using the process monitor.\nOpenSplice support is currently not available for MacOS. Also access to native handles is not yet implemented.\nUsing Connext it is currently not allowed for two topics with the same base name but different namespaces to have a different type (see issue).\n\n\n\n"},{"id":17,"url":"/doc/ros2/Contributing/Build-Cop-and-Build-Farmer-Guide/","title":"Build Cop and Build Farmer Guide","content":"\nBuild Cop and Build Farmer Guide¶\n\nTable of Contents\n\nOn-boarding\nRetirement\nBuild Cop\n\nMission\nBuild Cop Tasks\n\n\nBuild Farmer\n\nMission\nBuild Farmer Tasks\nResources\n\n\n\n\nThis page covers two rotating developer roles we have on the ROS 2 team, the build cop and the build farmer.\nThese two roles are related, but subtly different.\nThe build cop is responsible for monitoring our Continuous Integration (CI) server to make sure our “nightly” jobs and “packaging” jobs do not accumulate new regressions.\nThis allows us to build on relatively stable “ci” (or “manual”) jobs when checking to see if a new feature or bug fix introduces any new regressions.\nThe build farmer, on the other hand, is responsible for ensuring that the machines that run all of our CI jobs are up, running, and up-to-date, so that they are available for other developers to check their pull requests.\nThese two jobs have so far been the same person for periods of about two weeks, but they are separated here so that they could be different people in the future and to make a distinction between the roles and responsibilities.\nThis document is meant mostly for ROS 2 team developers, but it might be useful for others too.\n\nOn-boarding¶\nIf you are becoming the next build cop or build farmer you should:\n\nMake sure you are subscribed to and have the “deliver every email” option turned on for this mailing list:\n\nhttps://groups.google.com/forum/#!forum/ros2-buildfarm\n\n\nMake sure you are “watching” this GitHub repository:\n\nhttps://github.com/ros2/build_cop\n\n\nTalk with the previous build cop and/or build farmer about on-going issues\nUpdate the description of the main view on Jenkins to the current date and your name:\n\nhttp://ci.ros2.org/\n\n\n\n\n\nRetirement¶\nIf you are finishing your stint as either build cop or build farmer you should:\n\nUnsubscribe or switch to “digest” for this mailing list:\n\nhttps://groups.google.com/forum/#!forum/ros2-buildfarm\n\n\n“Unwatch” this GitHub repository:\n\nhttps://github.com/ros2/build_cop\n\n\nSummarize the on-going issues for the next build cop or build farmer to which you are handing off\n\n\n\nBuild Cop¶\nThis section assumes that you have reviewed the ROS 2 on boarding document.\n\nMission¶\nThe goal of the build cop is to keep the jobs “green” (succeeding without test failures or warnings) on the buildfarm and to report any regression to the appropriate person.\nThis will reduce the overhead of several people looking at, or investigating, the same build failures.\nThis will also allow the other people on the team not to receive nightly email for the failing and/or unstable builds.\n\n\nBuild Cop Tasks¶\nEvery morning the build cop should go through all the nightly jobs and packaging jobs and act on new failing or unstable jobs.\nThe “ci” jobs, which are started manually by developers, are not the responsibility of the build cop unless all “ci” are failing, which would indicate something was merged to the default branches which is broken.\nHow to classify and deal with new failures is described in the next section.\nAdditionally, the build cop should strive to keep track of existing issues which are either preexisting or cannot be resolved with a day or so.\nIssues are tracked on this repository which only the build cop must be “watching” (getting GitHub notifications), though anyone interested can follow it too:\nhttps://github.com/ros2/build_cop/issues\nThe above repository is also used to track Build Farmer issues.\nIt is meant to be a way for the build cop or build farmer to track long running items for handing off to the next person and so they can “mention” individuals on particular issues without the whole team getting notified of every issue.\n\nTypes of Failures¶\nEach failure can be categorized into one of a few classifications:\n\nNode failure:\n\nfailures which appear to be due to a machine configuration and not a code change\npass it on to the build farmer\n\n\nTrivial failure:\n\nLinter failure\nNew warnings\n\n\nCritical failure:\n\nBreaking builds on the “default” branch\nRegression (existing tests which were passing are now failing)\nNew tests that are failing (never were passing)\n\n\nImportant failure:\n\nNew feature which is not fully covered by tests\nIncrease flakiness (new flaky tests or made existing flaky tests more flaky)\n\n\n\n\n\nNew Failure Actions¶\nIn each case different actions should be taken by the build cop:\n\nTrivial failure should be fixed by the Build Cop right away:\n\nPushed on a branch\nTested on CI\nMerged to the default branch\nAdd a comment to the PR introducing the failure referencing the fixing commit\n\n\nCritical failures:\n\nFailure should be reported on the PR introducing it by tagging the submitter and the reviewer that +1’d it.\nSubmitter of the PR has to act on it during the next half day by either:\n\nReverting the change and ticketing the problem / comment on the PR the reason it’s been reverted\nSubmit a patch to fix the failure\n\n\n\n\nImportant failures:\n\nFailure should be reported on the PR introducing it by tagging the submitter + the reviewer the +1’d it.\nSubmitter has to either:\n\nAddress it the same week\nAdd it to the next sprint\n\n\n\n\n\n\n\nTips¶\n\nYou can search for PRs merged between two dates with, e.g.:\n\nhttps://github.com/search?utf8=%E2%9C%93&q=user%3Aament+user%3Aros2+merged%3A%222017-04-17T22%3A00%3A00-08%3A00+..+2017-04-18T23%3A30%3A00-08%3A00%22&type=Issues\n(note that FastRTPS and other external repos won’t appear)\n\n\nTo get the exact list of code that changed, generate a diff between the output of vcs export --exact between two builds.\n\nThis is particularly useful for external repos such as FastRTPS where old commits may get pushed to the master branch overnight, and are difficult to spot in the GitHub UI.\n\n\nTimes displayed at the top of jenkins jobs are in UTC. You can convert the times with e.g.:\n\nhttps://www.google.com/webhp?sourceid=chrome-instant&ion=1&espv=2&ie=UTF-8#q=when+it’s+9:25:12+PM+UTC+time+pst\n\n\nIf linter failures occur overnight it is usually because of a new version of a linter.\n\nCreate a diff of the last pip freeze output of two builds to see which versions changed.\nIf it’s a regression in a dependency you can pin the older version temporarily, see this PR for an example.\n\n\n\n\n\n\n\nBuild Farmer¶\nThis section assumes that you have reviewed the ROS 2 on boarding document.\n\nMission¶\nThe mission of the build farmer is to keep the build farm in a healthy, up-to-date state.\nIdeally all Jenkins nodes will have the same/latest version of every package.\nThis will require monitoring and patching up any node when things come up.\n\n\nBuild Farmer Tasks¶\n\nMonitor the buildfarm (using the https://groups.google.com/forum/#!forum/ros2-buildfarm mailing list for email notifications)\nTake failing nodes off-line with descriptive message about the issue and investigate the failure ASAP.\n\nTaking a node off-line:\n\nlog in ci.ros2.org\nclick on the node in the left column of Jenkins UI (e.g. osx_slave_mini1)\nclick on “Mark this node temporary off-line” button (top right corner)\n\n\nInvestigate the failure (see section below)\n\n\nReport error and fixing attempt using the Build Farmer Reporting Form\n\nIf the same problem and action is taken on multiple nodes, select all the relevant nodes in the form before submitting it\n\n\nIf fixing attempt failed:\n\nKeep the node off-line on the farm\nUpdate the reason for node being off-line\nPut the status and error message in the status sheet of the logbook\nAllocate time in the next few days to dive in the problem\n\n\nIf you rescue a previously off-line node:\n\nUpdate the status sheet of the logbook by:\n\nRemoving the error message in the status column\nUpdate the date next to it\n\n\n\n\nOnce investigation is finished, clean the machine: close all your windows, stash or remove any local changes\n\nRationale\n\nAnybody logging into the machine need to know that no one is working on it\nIf the machine reboots the machine needs to be in an operational state without local changes\n\n\n\n\nMaking sure install instructions are up to date\nUse the existing logbook to put together an FAQ or best practice to rescue nodes\n\n\nHow to Investigate a Failing Node¶\nIf the node failed to build, look at the console output of the failing build:\n\nClick on the link of the failing job received by email or go to ci.ros2.org and click on the number (e.g. #2345) next to the failing job(red icon).\nClick on Console Output in the left column\nLook for the reason of the failure\nIf the failure is not due to a machine configuration, relay to the build cop\n\nIf you need to access a machine:\n\nSee this spreadsheet (private) for credentials for all the different Jenkins Nodes:\nFor machines hosted at OSRF, you’ll need to be on the OSRF network or have a VPN connection.\nFor machines which require ssh keys ask on ros@osrfoundation.org for your public keys to be added.\nThe Packet.net nodes (with “packet” in the name):\n\nCan be managed by logging in at https://packet.net with <brian’s email address>/<the usual company password>\n\nThis will change after we set up a team account to manage servers.\n\n\nCan be accessed with Tully’s or Brian’s ssh key.\n\nThis will change after we set up a team account to manage servers.\n\n\n\n\n\n\n\nTroubleshooting¶\nIf a node goes off-line:\n\nFor machines with VNC, you should try that first because many failures can be due to pop-up windows or required updates\nIf you don’t have any pop-ups and relaunching the jenkins client doesn’t fix it, then you’ll have to start troubleshooting.\nLooking at configuration difference between the nodes may be useful (java version, pip freeze, etc.)\nFor Linux nodes that have gone off-line (e.g. because of a reboot), they can be reconnected through the Jenkins web interface of that node\n\nOther tips:\n\nThe environment variables on Windows machines are output at the beginning of Jenkins jobs (search for ==> set).\nIf you are modifying environment variables on Windows nodes, you may need to restart the machine before the changes are reflected in the jobs.\nThis is due to the Jenkins slave session caching the environment variables to some degree.\n\nOn the Windows machines, the Jenkins slave program runs as a service as the System account.\nFor this user, the “home” directory seems to be C:\\Windows\\system32\\config\\systemprofile.\nYou can “become” the system user to debug stuff by downloading pxexec:\nhttps://technet.microsoft.com/en-us/sysinternals/pxexec\nThen you extract the zip, then open a command-prompt as administrator, and then run psexec -i -s cmd.exe.\nThis is all pieced together from a couple of pages here:\nhttp://blog.thomasvandoren.com/jenkins-windows-slave-with-git.html\nand here:\nhttps://answers.atlassian.com/questions/128324/where-is-the-home-directory-for-the-system-user\n\nEvery so often the router reboots. The mac machines usually don’t reconnect to Jenkins properly. Just manually reconnect them.\n\n\n\nResources¶\n\n\nHow to setup the Jenkins master\nHow to setup Linux Jenkins nodes\nHow to setup a macOS Jenkins node\nHow to setup a Windows Jenkins node\n\n\n\n\n\n"},{"id":18,"url":"/doc/ros2/Installation/Fedora-Development-Setup/","title":"Building ROS 2 on Fedora Linux","content":"\nBuilding ROS 2 on Fedora Linux¶\n\nHow to setup the development environment?¶\nFirst install a bunch of dependencies:\n$ sudo dnf install cppcheck cmake libXaw-devel opencv-devel poco-devel poco-foundation python3-empy python3-devel python3-nose python3-pip python3-pyparsing python3-pytest python3-pytest-cov python3-pytest-runner python3-setuptools python3-yaml tinyxml-devel eigen3-devel python3-pydocstyle python3-pyflakes python3-coverage python3-mock python3-pep8 uncrustify python3-argcomplete python3-flake8 python3-flake8-import-order asio-devel tinyxml2-devel libyaml-devel\n\n\nThen install vcstool from pip:\n$ pip3 install vcstool\n\n\nWith this done, you can follow the rest of the instructions to fetch and build ROS2.\n\n\n"},{"id":19,"url":"/doc/ros2/Installation/Linux-Development-Setup/","title":"Building ROS 2 on Linux","content":"\nBuilding ROS 2 on Linux¶\n\nTable of Contents\n\nSystem Requirements\nSystem setup\n\nAdd the ROS 2 apt repository\nInstall development tools and ROS tools\n\n\nGet ROS 2.0 code\nInstall dependencies using rosdep\nInstall more DDS implementations (Optional)\n\nPrismTech OpenSplice Debian Packages built by OSRF\nRTI Connext (version 5.3.1)\n\n\nBuild the code in the workspace\nTry some examples\nAlternate compilers\n\nClang\n\n\nTroubleshooting\n\nInternal compiler error\nOut of memory\nMultiple Host Interference\n\n\n\n\n\nSystem Requirements¶\nTarget platforms for Bouncy Bolson (see REP 2000).\n- Ubuntu Linux Xenial Xerus 16.04 64-bit\n- Ubuntu Linux Bionic Beaver 18.04 64-bit\nRecommended Support (not actively tested or supported)\n- Debian Stretch\n- Fedora 26, see alternate instructions.\n- Arch Linux, see alternate instructions.\nMake sure that you have a locale set which supports UTF-8 We test with the following settings.\nIf you are in a minimal environment such as a docker containers the locale may be set to something minimal like POSIX.\nTo set the locale an example is below. It should be fine if you’re using a different UTF-8 supported locale.\nsudo locale-gen en_US en_US.UTF-8\nsudo update-locale LC_ALL=en_US.UTF-8 LANG=en_US.UTF-8\nexport LANG=en_US.UTF-8\n\n\n\n\nSystem setup¶\n\nAdd the ROS 2 apt repository¶\nFirst make sure you have the ROS 2 apt repositories added to your system, if not refer to the following section.\n\n\nInstall development tools and ROS tools¶\nsudo apt update && sudo apt install -y \\\n  build-essential \\\n  cmake \\\n  git \\\n  python3-colcon-common-extensions \\\n  python3-pip \\\n  python-rosdep \\\n  python3-vcstool \\\n  wget\n# install some pip packages needed for testing\npython3 -m pip install -U \\\n  argcomplete \\\n  flake8 \\\n  flake8-blind-except \\\n  flake8-builtins \\\n  flake8-class-newline \\\n  flake8-comprehensions \\\n  flake8-deprecated \\\n  flake8-docstrings \\\n  flake8-import-order \\\n  flake8-quotes \\\n  git+https://github.com/lark-parser/lark.git@0.7d \\\n  pytest-repeat \\\n  pytest-rerunfailures \\\n  pytest \\\n  pytest-cov \\\n  pytest-runner \\\n  setuptools\n# install Fast-RTPS dependencies\nsudo apt install --no-install-recommends -y \\\n  libasio-dev \\\n  libtinyxml2-dev\n\n\n\n\n\nGet ROS 2.0 code¶\nCreate a workspace and clone all repos:\nmkdir -p ~/ros2_ws/src\ncd ~/ros2_ws\nwget https://raw.githubusercontent.com/ros2/ros2/release-latest/ros2.repos\nvcs import src < ros2.repos\n\n\n\nNote: if you want to get all of the latest bug fixes then you can try the “tip” of development by replacing release-latest in the URL above with master. The release-latest is preferred by default because it goes through more rigorous testing on release than changes to master do. See also Maintaining a Source Checkout.\n\n\n\nInstall dependencies using rosdep¶\nsudo rosdep init\nrosdep update\n# [Ubuntu 18.04]\nrosdep install --from-paths src --ignore-src --rosdistro crystal -y --skip-keys \"console_bridge fastcdr fastrtps libopensplice67 libopensplice69 rti-connext-dds-5.3.1 urdfdom_headers\"\n# [Ubuntu 16.04]\nrosdep install --from-paths src --ignore-src --rosdistro crystal -y --skip-keys \"console_bridge fastcdr fastrtps libopensplice67 libopensplice69 python3-lark-parser rti-connext-dds-5.3.1 urdfdom_headers\"\n\n\n\n\nInstall more DDS implementations (Optional)¶\nROS 2.0 builds on top of DDS.\nIt is compatible with multiple DDS or RTPS (the DDS wire protocol) vendors.\nThe repositories you downloaded for ROS 2.0 includes eProsima’s Fast RTPS, which is the only bundled vendor.\nIf you would like to use one of the other vendors you will need to install their software separately before building.\nThe ROS 2.0 build will automatically build support for vendors that have been installed and sourced correctly.\nBy default we include eProsima’s FastRTPS in the workspace and it is the default middleware. Detailed instructions for installing other DDS vendors are provided below.\n\nPrismTech OpenSplice Debian Packages built by OSRF¶\n# For Crystal Clemmys\nsudo apt install libopensplice69  # from packages.ros.org/ros2/ubuntu\n\n# For Bouncy Bolson\nsudo apt install libopensplice67  # from packages.ros.org/ros2/ubuntu\n\n\nAdd this to your ~/.bashrc\nexport OSPL_URI=file:///usr/etc/opensplice/config/ospl.xml\n\n\n\n\nRTI Connext (version 5.3.1)¶\n\nDebian packages provided in the ROS 2 apt repositories¶\nYou can install a Debian package of RTI Connext available on the ROS 2 apt repositories.\nYou will need to accept a license from RTI.\nsudo apt install -q -y \\\n    rti-connext-dds-5.3.1  # from packages.ros.org/ros2/ubuntu\n\n\nSource the setup file to set the NDDSHOME environment variable.\ncd /opt/rti.com/rti_connext_dds-5.3.1/resource/scripts && source ./rtisetenv_x64Linux3gcc5.4.0.bash; cd -\n\n\nNote: when using zsh you need to be in the directory of the script when sourcing it to have it work properly\nNow you can build as normal and support for RTI will be built as well.\nIf you want to install the Connext DDS-Security plugins please refer to this page\n\n\nOfficial binary packages from RTI¶\nYou can install the Connext 5.3.1 package for Linux provided by RTI from their downloads page.\nTo use RTI Connext you will need to have obtained a license from RTI.\nAdd the following line to your .bashrc file pointing to your copy of the license.\nexport RTI_LICENSE_FILE=path/to/rti_license.dat\n\n\nAfter downloading, use chmod +x on the .run executable and then execute it.\nNote that if you’re installing to a system directory use sudo as well.\nThe default location is ~/rti_connext_dds-5.3.1\nSource the setup file to set the NDDSHOME environment variable.\nsource ~/rti_connext_dds-5.3.1/resource/scripts/rtisetenv_x64Linux3gcc5.4.0.bash\n\n\nNow you can build as normal and support for RTI will be built as well.\n\n\n\n\nBuild the code in the workspace¶\nNote: to build the ROS 1 bridge, read the ros1_bridge instructions.\nMore info on working with a ROS workspace can be found in this tutorial.\ncd ~/ros2_ws/\n# On Ubuntu Linux Bionic Beaver 18.04\ncolcon build --symlink-install\n# On Ubuntu Linux Xenial Xerus 16.04\ncolcon build --symlink-install --packages-ignore qt_gui_cpp rqt_gui_cpp\n\n\nNote: if you are having trouble compiling all examples and this is preventing you from completing a successful build, you can use AMENT_IGNORE in the same manner as CATKIN_IGNORE to ignore the subtree or remove the folder from the workspace.\nTake for instance: you would like to avoid installing the large OpenCV library.\nWell then simply $ touch AMENT_IGNORE in the cam2image demo directory to leave it out of the build process.\nOptionally install all packages into a combined directory (rather than each package in a separate subdirectory).\nOn Windows due to limitations of the length of environment variables you should use this option when building workspaces with many (~ >> 100 packages).\nAlso, if you have already installed ROS2 from Debian make sure that you run the build command in a fresh environment. You may want to make sure that you do not have source /opt/ros/${ROS_DISTRO}/setup.bash in your .bashrc.\ncolcon build --symlink-install --merge-install\n\n\nAfterwards source the local_setup.* from the install folder.\n\n\nTry some examples¶\nIn one terminal, source the setup file and then run a talker:\n. ~/ros2_ws/install/local_setup.bash\nros2 run demo_nodes_cpp talker\n\n\nIn another terminal source the setup file and then run a listener:\n. ~/ros2_ws/install/local_setup.bash\nros2 run demo_nodes_py listener\n\n\nYou should see the talker saying that it’s Publishing messages and the listener saying I heard those messages.\nHooray!\nSee the demos for other things to try.\n\n\nAlternate compilers¶\nUsing a different compiler besides gcc to compile ROS 2 is easy. If you set the environment variables CC and CXX to executables for a working C and C++ compiler, respectively, and retrigger CMake configuration (by using --force-cmake-config or by deleting the packages you want to be affected), CMake will reconfigure and use the different compiler.\n\nClang¶\nTo configure CMake to detect and use Clang:\nsudo apt install clang\nexport CC=clang\nexport CXX=clang++\ncolcon build --cmake-force-configure\n\n\nTODO: using ThreadSanitizer, MemorySanitizer\n\n\n\nTroubleshooting¶\n\nInternal compiler error¶\nIf you experience an ICE when trying to compile on a memory constrained platform like a Raspberry PI you might want to build single threaded (prefix the build invocation with MAKEFLAGS=-j1).\n\n\nOut of memory¶\nThe ros1_bridge in its current form requires 4Gb of free RAM to compile.\nIf you don’t have that amount of RAM available it’s suggested to use AMENT_IGNORE in that folder and skip its compilation.\n\n\nMultiple Host Interference¶\nIf you’re running multiple instances on the same network you may get interference.\nTo avoid this you can set the environment variable ROS_DOMAIN_ID to a different integer, the default is zero.\nThis will define the DDS domain id for your system.\nNote that if you are using the OpenSplice DDS implementation you will also need to update the OpenSplice configuration file accordingly. The location of the configuration file is referenced in the OSPL_URI environment variable.\n\n\n\n"}]