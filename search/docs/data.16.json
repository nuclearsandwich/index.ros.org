[{"id":64,"url":"/doc/ros2/Contributing/Set-up-a-new-Linux-CI-node/","title":"How to setup Linux Jenkins nodes","content":"\nHow to setup Linux Jenkins nodes¶\n\nTable of Contents\n\nCreating an AWS instance\nSetting up the machine\nAdding it to the master\n\n\nThis page describes how to set up a linux machine for ROS2 CI jobs using AWS.\n\nCreating an AWS instance¶\nIn short, use the company AWS account to launch an instance running based off the official Ubuntu 16.04 AMI.\n\nAMI: Ubuntu 16.04\nRegion: N. California us-west-1a\nType: c4.large\nStorage: EBS 1TB\nSecurity Group: ROS 2 Jenkins Build Machines\nKey pair: Create a new pair with a descriptive name like ci_ros2_linux_4\nMake sure to save it with the other credentials so others can access this machine\n\n\n\nGive the instance a descriptive name like ROS2 CI (linux 4).\nRecord the ip address here (private).\n\n\nSetting up the machine¶\nIn short, make sure the jenkins master can ssh into the new node and run docker.\n\nUse the key pair to log into the new node\n\nssh -i ci_ros2_linux_4.pem ubuntu@IPADDRESS\n\n\nRun the following commands\nsudo apt update\nsudo apt install -y git\nsudo apt install -y openjdk-8-jre-headless\nsudo bash -c 'echo \"deb http://repositories.ros.org/ubuntu/testing/ `lsb_release -cs` main\" > /etc/apt/sources.list.d/ros-latest.list'\nsudo bash -c 'curl --silent http://repositories.ros.org/repos.key |sudo apt-key add -'\nsudo apt update\nsudo apt install -y python-vcstool\ncurl -fsSL https://get.docker.com/ | sh\nsudo adduser --disabled-password jenkins\nsudo usermod -aG docker jenkins\nsudo service docker start\n\n\n\nMake sure the jenkins user can run docker\nsudo su jenkins\ndocker run hello-world\n\n\n\nAs the jenkins user, add the master’s public key to authorized_keys\n\nSSH into the jenkins master and get the contents of the public key (probably at /var/lib/jenkins/.ssh/id_rsa.pub, or wherever the home directory of the jenkins user is)\n\nSSH into the new slave and add that key to the authorized keylist\n.. code-block:: bash\n\n# on new slave\ncd /home/jenkins/\nmkdir .ssh\nchmod 700 .ssh\ntouch .ssh/authorized_keys\nchmod 600 .ssh/authorized_keys\n# Paste id_rsa.pub from the jenkins master into this file\nvim .ssh/authorized_keys\n\n\n\n\n\n\n\nAdding it to the master¶\n\nAdd a new agent to http://ci.ros2.org/computer/\nNumber of executors: 1\nRemote root directory: /home/jenkins\nLabels: linux\nLaunch method: Launch slave agents via ssh\nHost: Ip address of new node\nCredentials: Jenkins\nHost Key Verification Strategy: Manually provided key verification strategy\nSSH Key paste the contents of /etc/ssh/ssh_host_rsa_key.pub from the new node here.\n\n\nNode Properties:\nCheck Notify when Node online status changes and set the email to the ros2 buildfarm google group.\n\n\n\n\n\n\nLaunch the agent on the new node\n\n\n\n"},{"id":65,"url":"/doc/ros2/Contributing/Set-up-a-new-Windows-CI-node/","title":"How to setup a Windows Jenkins node","content":"\nHow to setup a Windows Jenkins node¶\n\nTable of Contents\n\nInstall and Update Windows 10\nInstall Dependencies for ROS 2\nSetup git\nSetup Jenkins Agent\nInstall RTI Connext\n\n\n\nNote\nSee this older (private) document for previous instructions:\nhttps://docs.google.com/document/d/1SmmWa7MVnwjmMw9XJF33-fsa0dtkYj2AeEXBa8BCsYs/edit\n\n\nInstall and Update Windows 10¶\nWe use the normal Windows 10 version, not the enterprise, but other than that we just do system updates and use default settings otherwise.\n\n\nInstall Dependencies for ROS 2¶\nFollow our Windows “from source” installation instructions.\n\n\nSetup git¶\nEnsure that the git installation has a (garbage) email and name, otherwise it will fail if it ever needs to make merge commits when merging branches with “master”.\nNote that this must be done in the context of the “System” user, which is what the Jenkins service will run as.\n\nBecome the system user by using psexec:\nDownload it from: https://technet.microsoft.com/en-us/sysinternals/bb897553.aspx\nThen extract the zip, open a command-prompt as administrator, and run: psexec -i -s cmd.exe\n\n\n\nThis is all pieced together from a couple of pages here:\n\nhttp://blog.thomasvandoren.com/jenkins-windows-slave-with-git.html\nhttps://answers.atlassian.com/questions/128324/where-is-the-home-directory-for-the-system-user\n\nOnce you are the system user, set the git config:\n> git config --global user.email \"noreply@osrfoundation.org\"\n> git config --global user.name \"nobody\"\n\n\n\n\nSetup Jenkins Agent¶\nDownload and install Java from Oracle:\nhttps://java.com/en/download/\nCreate the C:\\J folder.\nGo to http://ci.ros2.org and select: Manage Jenkins -> Manage Nodes -> New node\nCopy an existing node and choose a working windows node (at the time of the writing Windshield or Portable), fill in all the description fields, set the label to “windows slave” and save.\nHit the “launch” button to download the “Java Web Start App” and save it on the desktop.\nOpen an Administrator cmd.exe and then:\n> cd \\path\\to\\downloaded\\file\n> .\\slave-agent.jnlp\n\n\nOnce open, go to File->”Install as a Service”.\nThen you can close the slave agent as it will start on boot.\n\n\nInstall RTI Connext¶\nDownload and install Connext binary:\nhttp://www.rti.com/downloads/connext-files.html\nMake sure to also install the security plugins.\nDownload the license file from our private github repository:\nhttps://github.com/osrf/rticonnextdds-src/tree/30adec34dbaf1445914ff9e003640b0c50ab9969\nRun the RTI launcher application and point it at the license file.\nFinally, just need to reboot to be sure the node comes online as expected.\n\n\n"},{"id":66,"url":"/doc/ros2/Tutorials/Logging-and-logger-configuration/","title":"Logging and logger configuration demo","content":"\nLogging and logger configuration demo¶\nSee the logging page for details on available functionality.\nIn this demo, different types of log calls are shown and the severity level of different loggers is configured locally and externally.\nStart the demo with:\nros2 run logging_demo logging_demo_main\n\n\nOver time you will see output from various log calls with different properties.\nTo start with you will only see output from log calls with severity INFO and above (WARN, ERROR, FATAL).\nNote that the first message will only be logged once, though the line is reached on each iteration, as that is a property of the log call used for that message.\n\nLogger level configuration: programmatically¶\nAfter 10 iterations the level of the logger will be set to DEBUG, which will cause additional messages to be logged.\nSome of these debug messages cause additional functions/expressions to be evaluated, which were previously skipped as DEBUG log calls were not enabled.\nSee the source code of the demo for further explanation of the calls used, and see the rclcpp logging documentation for a full list of supported logging calls.\n\n\nLogger level configuration: externally¶\nIn the future there will be a generalized approach to external configuration of loggers at runtime (similar to how rqt_logger_level in ROS 1 allows logger configuration via remote procedural calls).\nThis concept is not yet officially supported in ROS 2.\nIn the meantime, this demo provides an example service that can be called externally to request configuration of logger levels for known names of loggers in the process.\nThe demo previously started is already running this example service.\nTo set the level of the demo’s logger back to INFO, call the service with:\nros2 service call /config_logger logging_demo/ConfigLogger \"{logger_name: 'logger_usage_demo', level: INFO}\"\n\n\nThis service call will work on any logger that is running in the process provided that you know its name.\nThis includes the loggers in the ROS 2 core, such as rcl (the common client library package).\nTo enable debug logging for rcl, call:\nros2 service call /config_logger logging_demo/ConfigLogger \"{logger_name: 'rcl', level: DEBUG}\"\n\n\nYou should see debug output from rcl start to show.\n\nUsing the logger config component¶\nThe server that responds to the logger configuration requests has been developed as a component so that it may be added to an existing composition-based system.\nFor example, if you are using a container to run your nodes, to be able to configure your loggers you only need to request that it additionally load the logging_demo::LoggerConfig component into the container.\nAs an example, if you want to debug the composition::Talker demo, you can start the talker as normal with:\nShell 1:\nros2 run composition api_composition\n\n\nShell 2:\nros2 run composition api_composition_cli composition composition::Talker\n\n\nAnd then when you want to enable debug logging, load the LoggerConfig component with:\nShell 2\nros2 run composition api_composition_cli logging_demo logging_demo::LoggerConfig\n\n\nAnd finally, configure all unset loggers to the debug severity by addressing the empty-named logger.\nNote that loggers that have been specifically configured to use a particular severity will not be affected by this call.\nShell 2:\nros2 service call /config_logger logging_demo/ConfigLogger \"{logger_name: '', level: DEBUG}\"\n\n\nYou should see debug output from any previously unset loggers in the process start to appear, including from the ROS 2 core.\n\n\n\nLogger level configuration: command line¶\nAs of the Bouncy ROS 2 release, the severity level for loggers that have not had their severity set explicitly can be configured from the command line.\nRestart the demo including the following command line argument:\nros2 run logging_demo logging_demo_main __log_level:=debug\n\n\nThis configures the default severity for any unset logger to the debug severity level.\nYou should see debug output from loggers from the demo itself and from the ROS 2 core.\nThe ability to configure specific loggers from the command line is forthcoming.\n\nConsole output formatting¶\nIf you would like more or less verbose formatting, you can use the RCUTILS_CONSOLE_OUTPUT_FORMAT environment variable.\nFor example, to additionally get the timestamp and location of the log calls, stop the demo and restart it with the environment variable set:\nexport RCUTILS_CONSOLE_OUTPUT_FORMAT=\"[{severity} {time}] [{name}]: {message} ({function_name}() at {file_name}:{line_number})\"\n# Or, on Windows:\n# set \"RCUTILS_CONSOLE_OUTPUT_FORMAT=[{severity} {time}] [{name}]: {message} ({function_name}() at {file_name}:{line_number})\"\nros2 run logging_demo logging_demo_main\n\n\nYou should see the timestamp in seconds and the function name, filename and line number additionally printed with each message.\nThe ``time`` option is only supported as of the ROS 2 Bouncy release.\n\n\n\n"},{"id":67,"url":"/doc/ros2/Installation/Maintaining-a-Source-Checkout/","title":"Maintaining a Source Checkout of ROS 2","content":"\nMaintaining a Source Checkout of ROS 2¶\n\n\nUpdate your repository list\nLatest release\nParticular release\nDevelopment branches\n\n\nUpdate your repositories\nDownload the new source code\nRebuild your workspace\nInspecting your source checkout\n\n\nIf you have installed ROS 2 from source, there may have been changes made to the source code since the time that you checked it out.\nTo keep your source checkout up to date, you will have to periodically update your ros2.repos file, download the latest sources, and rebuild your workspace.\n\nUpdate your repository list¶\nEach ROS 2 release includes a ros2.repos file that contains the list of repositories and their version for that release.\n\nLatest release¶\nTo download the repository list from the latest ROS 2 release, run:\nLinux/OS X\ncd ~/ros2_ws\nmv -i ros2.repos ros2.repos.old\nwget https://raw.githubusercontent.com/ros2/ros2/release-latest/ros2.repos\n\n\nWindows\n# CMD\n> cd \\dev\\ros2\n> curl -sk https://raw.githubusercontent.com/ros2/ros2/release-latest/ros2.repos -o ros2.repos\n\n# PowerShell\n> cd \\dev\\ros2\n> curl https://raw.githubusercontent.com/ros2/ros2/release-latest/ros2.repos -o ros2.repos\n\n\n\n\nParticular release¶\nIf you wish to checkout a particular release, you can get its repository list by specifying the name of the release in the url of the following step, e.g. for alpha 7:\nLinux/OS X\ncd ~/ros2_ws\nmv -i ros2.repos ros2.repos.old\nwget https://raw.githubusercontent.com/ros2/ros2/release-alpha8/ros2.repos\n\n\nWindows\n# CMD\n> cd \\dev\\ros2\n> curl -sk https://raw.githubusercontent.com/ros2/ros2/release-alpha8/ros2.repos -o ros2.repos\n\n# PowerShell\n> cd \\dev\\ros2\n> curl https://raw.githubusercontent.com/ros2/ros2/release-alpha8/ros2.repos -o ros2.repos\n\n\nThe format of the name of the release comes from the tag associated with the release here.\n\n\nDevelopment branches¶\nIf you wish to checkout the bleeding-edge development code, you can get the relevant repository list by running:\nLinux/OS X\ncd ~/ros2_ws\nmv -i ros2.repos ros2.repos.old\nwget https://raw.githubusercontent.com/ros2/ros2/master/ros2.repos\n\n\nWindows\n# CMD\n> cd \\dev\\ros2\n> curl -sk https://raw.githubusercontent.com/ros2/ros2/master/ros2.repos -o ros2.repos\n\n# PowerShell\n> cd \\dev\\ros2\n> curl https://raw.githubusercontent.com/ros2/ros2/master/ros2.repos -o ros2.repos\n\n\n\n\n\nUpdate your repositories¶\nYou will notice that in the ros2.repos file, each repository has a version associated with it that points to a particular commit hash, tag, or branch name.\nIt is possible that these versions refer to new tags/branches that your local copy of the repositories will not recognize as they are out-of-date.\nBecause of this, you should update the repositories that you have already checked out with the following command:\nvcs custom --args remote update\n\n\n\n\nDownload the new source code¶\nYou should now be able to download the sources associated with the new repository list with:\nLinux/OS X\nvcs import src < ros2.repos\nvcs pull src\n\n\nWindows\n# CMD\n> vcs import src < ros2.repos\n> vcs pull src\n\n# PowerShell\n> vcs import --input ros2.repos src\n> vcs pull src\n\n\n\n\nRebuild your workspace¶\nNow that the workspace is up to date with the latest sources, remove your previous install and rebuild your workspace with, for example:\ncolcon build --symlink-install\n\n\n\n\nInspecting your source checkout¶\nDuring your development you may have deviated from the original state of your workspace from when you imported the repository list.\nIf you wish to know the versions of the set of repositories in your workspace, you can export the information using the following command:\nLinux/OS X\ncd ~/ros2_ws\nvcs export src > my_ros2.repos\n\n\nWindows\n> cd \\dev\\ros2\n> vcs export src > my_ros2.repos\n\n\nThis my_ros2.repos file can then be shared with others so that they can reproduce the state of the repositories in your workspace.\n\n\n"}]