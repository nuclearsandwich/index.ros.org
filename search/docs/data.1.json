[{"id":4,"url":"/doc/ros2/Releases/","title":"ROS 2 Releases","content":"\nROS 2 Releases¶\n\nSummary¶\nA summary of releases of ROS 2 software is listed below.\n\n\n\n\n\n\n\n\nRelease Overview\nDate\n\n\n\nCrystal Clemmys\n14 December 2018\n\nBouncy Bolson\n2 July 2018\n\nArdent Apalone\n8 December 2017\n\nbeta3\n13 September 2017\n\nbeta2\n5 July 2017\n\nbeta1\n19 December 2016\n\nalpha1-8\n31 August 2015 - 4 October 2016\n\n\n\nFor more details about each release, see the corresponding release overview.\n\n\nRelease practices¶\n\nCore packages¶\nNew ROS 2 distributions are currently released every 6 months.\nDuring the release process, Open Robotics packages what is in the ros2.repos\nfile into installables for the supported platforms.\nThese installables take the form of “fat archives” on MacOS, Windows and Linux, and additionally Debian packages are created for Linux.\nCheck the release page for a distribution for details of the supported platform versions.\nAfter the first release of a distribution, patch releases may be made that include bug fixes and platform updates (particularly on platforms with rolling dependencies like Windows and MacOS) for the distribution.\nNew features are not typically released into an existing distribution, but are saved for the next distribution.\nThe roadmap details the upcoming features that are targeted for the next distribution.\nWhile we do aim to keep the API as stable as possible, 100% API compatibility is not guaranteed between distributions.\nInternal notes on how a release is made: Release-Howto\n\n\nExternal packages¶\nPackages outside of the ros2.repos file may be released by community members\ninto a ROS 2 distribution.\nThis is currently supported for Linux Debian packages, following these instructions.\nThese packages can be released at any time during the lifecycle of a ROS 2 distribution.\n\n\n\n"},{"id":5,"url":"/doc/ros2/Features/","title":"Features Status","content":"\nFeatures Status¶\nThe features listed below are available in the current ROS 2 release.\nUnless otherwise specified, the features are available for all supported platforms (Ubuntu 18.04, OS X 10.12.x, Windows 10), DDS implementations (eProsima Fast RTPS, RTI Connext and ADLINK Opensplice) and programming language client libraries (C++ and Python).\nFor planned future development, see the Roadmap.\n\n\n\n\n\n\n\nFunctionality\nLink\nFine print\n\n\n\nDiscovery, transport and serialization over DDS\nArticle\n \n\nSupport for multiple DDS implementations, chosen at runtime\nTutorials\nCurrently eProsima Fast RTPS, RTI Connext and ADLINK OpenSplice are fully supported.\n\nCommon core client library that is wrapped by language-specific libraries\nDetails\n \n\nPublish/subscribe over topics\nSample code, Article\n \n\nClients and services\nSample code\n \n\nSet/retrieve parameters\nSample code\n \n\nROS 1 - ROS 2 communication bridge\nTutorial\nAvailable for topics and services, not yet available for actions.\n\nQuality of service settings for handling non-ideal networks\nDemo\n \n\nInter- and intra-process communication using the same API\nDemo\nCurrently only in C++.\n\nComposition of node components at compile-, link- or dlopen-time\nDemo\nCurrently only in C++.\n\nSupport for nodes with managed lifecycles\nDemo\nCurrently only in C++.\n\nDDS-Security support\nDemo\n \n\nCommand-line introspection tools using an extensible framework\nTutorial\n \n\nLaunch system  for coordinating multiple nodes\nTutorial\n \n\nNamespace support for nodes and topics\nArticle\n \n\nStatic remapping of ROS names\nTutorial\n \n\nDemos of an all-ROS 2 mobile robot\nDemo\n \n\nPreliminary support for real-time code\nDemo, demo\nLinux only. Not available for Fast RTPS.\n\nPreliminary support for “bare-metal” microcontrollers\nWiki\n \n\n\n\nBeside features of the platform the most impact of ROS comes from its available packages.\nThe following are a few high profile packages which are available in the latest release:\n\ngazebo_ros_pkgs\nimage_transport\nnavigation2\nrosbag2\nRQt\nRViz2\n\n\n"},{"id":6,"url":"/doc/ros2/Concepts/","title":"ROS 2 Concepts","content":"\nROS 2 Concepts¶\n\n\nOverview of ROS 2 Concepts\nROS 2 and different DDS/RTPS vendors\nAbout Quality of Service Settings\nAbout ROS 2 Interfaces\nAbout ROS2 client libraries\nLogging and logger configuration\n\n\nSee also http://docs.ros2.org/ for ROS 2 high level documentation.\n\n"},{"id":7,"url":"/doc/ros2/Tutorials/","title":"Tutorials","content":"\nTutorials¶\n\nBasic¶\n\n\nUsing Colcon to build packages\nUsing Ament\nOverview\nHow does it work ?\nCross-compiling ROS2\nCross-compiling examples for Arm\nAutomated Cross-compilation\nCross-compiling against a pre-built ROS2\nRun on the target\nOn the mixing of ament and catkin (catment)\nIntrospection with command line tools\nOverview and Usage of RQt\nPorting RQt plugins to Windows\nPassing ROS arguments to nodes via the command-line\nLaunching/monitoring multiple nodes with Launch\nWorking with multiple ROS 2 middleware implementations\nComposing multiple nodes in a single process\nIntroduction to msg and srv interfaces\nNew features in ROS 2 interfaces\nDefining custom interfaces (msg/srv)\nEclipse Oxygen with ROS 2 and rviz2 [community-contributed]\nBuilding ROS2 on Linux with Eclipse Oxygen [community-contributed]\nBuilding Realtime Linux for ROS 2 [community-contributed]\nReleasing a ROS 2 package with bloom\n\n\n\n\nAdvanced¶\n\n\nImplement a custom memory allocator\n\n\n\n\nUsing Docker¶\n\n\nRunning 2 nodes in a single docker container [community-contributed]\nRunning 2 nodes in 2 separate docker containers [community-contributed]\n\n\n\n\nDemos¶\n\n\n\nUse quality-of-service settings to handle lossy networks.\nManagement of nodes with managed lifecycles.\nEfficient intra-process communication.\nBridge communication between ROS 1 and ROS 2.\nRecording and playback of topic data with rosbag using the ROS 1 bridge.\nTurtlebot 2 demo using ROS 2.\nTurtleBot 3 demo using ROS 2. [community-contributed]\nUsing tf2 with ROS 2.\nWrite real-time safe code that uses the ROS 2 APIs.\nUse the rclpy API to write ROS 2 programs in Python.\nUse the robot state publisher to publish joint states and TF.\nUse DDS-Security.\nLogging and logger configuration.\n\n\n\nExamples¶\n\nPython and C++ minimal examples.\n\n\n\n"}]