[{"id":48,"url":"/doc/ros2/Tutorials/RQt-Source-Install-MacOS/","title":"Building RQt from Source on macOS","content":"\nBuilding RQt from Source on macOS¶\nThis page provides specific information to building RQt from source on macOS.\nFollow these instructions before proceeding with RQt Source Install page.\n\nSystem Requirements¶\nRQt is supported on macOS 10.12, but 10.13 also seems to work.\n\n\nDependencies¶\nThe primary dependencies of the RQt package are sip and PyQt5.\nPySide2 may be supported in the future.\n\nInstall dependencies¶\n$ brew install sip pyqt5\n$ brew install graphviz\n$ python3 -m pip install pygraphviz pydot\n$ brew link --force qt\n\n\nThis is the quickest solution but may cause issues when upgrading Qt or if other packages are expecting Qt 4.\nAnother option is to update your PATH and CMAKE_PREFIX_PATH to include the Qt install location:\n\n$ export PATH=\"$(brew --prefix qt)/bin:$PATH\"\n$ export CMAKE_PREFIX_PATH=\"$(brew --prefix qt):$CMAKE_PREFIX_PATH\"\n\n\n\n\n\n\nInstall RQt by source¶\nContinue with the RQt source install page.\n\n\n"},{"id":49,"url":"/doc/ros2/Installation/OSX-Development-Setup/","title":"Building ROS 2 on OS X","content":"\nBuilding ROS 2 on OS X¶\n\nTable of Contents\n\nSystem requirements\nInstall prerequisites\nDisable System Integrity Protection (SIP)\nGet the ROS 2 code\nInstall additional DDS vendors (optional)\nBuild the ROS 2 code\nTry some examples\nAlternative DDS sources\nAdlink OpenSplice\nRTI Connext (5.3)\n\n\nTroubleshooting\nSegmentation Fault when using pyenv\nLibrary not loaded; image not found\nQt build errors e.g. unknown type name 'Q_ENUM'\nMissing symbol when opencv (and therefore libjpeg, libtiff, and libpng) are installed with Homebrew\n\n\n\n\n\nSystem requirements¶\nWe support OS X 10.12.x.\nHowever, some new versions like 10.13.x and some older versions like 10.11.x and 10.10.x are known to work as well.\n\n\nInstall prerequisites¶\nYou need the following things installed to build ROS 2:\n\nXcode\n\nIf you don’t already have it installed, install Xcode and the Command Line Tools:\nxcode-select --install\n\n\n\n\n\nbrew (needed to install more stuff; you probably already have this):\n\nFollow installation instructions at http://brew.sh/\n\nOptional: Check that brew is happy with your system configuration by running:\nbrew doctor\n\n\nFix any problems that it identifies.\n\n\n\nUse brew to install more stuff:\nbrew install cmake cppcheck eigen pcre poco python3 tinyxml wget\n\n# install dependencies for Fast-RTPS if you are using it\nbrew install asio tinyxml2\n\nbrew install opencv\n\n\n\nInstall rviz dependencies\n# install dependencies for Rviz\nbrew install qt freetype assimp\n\n# Add the Qt directory to the PATH and CMAKE_PREFIX_PATH\nexport CMAKE_PREFIX_PATH=$CMAKE_PREFIX_PATH:/usr/local/opt/qt\nexport PATH=$PATH:/usr/local/opt/qt/bin\n\n\n\nUse python3 -m pip (just pip may install Python3 or Python2) to install more stuff:\npython3 -m pip install argcomplete catkin_pkg colcon-common-extensions coverage empy flake8 flake8-blind-except flake8-builtins flake8-class-newline flake8-comprehensions flake8-deprecated flake8-docstrings flake8-import-order flake8-quotes git+https://github.com/lark-parser/lark.git@0.7d mock nose pep8 pydocstyle pyparsing setuptools vcstool\n\n\n\nOptional: if you want to build the ROS 1<->2 bridge, then you must also install ROS 1:\n\nStart with the normal install instructions: http://wiki.ros.org/kinetic/Installation/OSX/Homebrew/Source\n\nWhen you get to the step where you call rosinstall_generator to get the source code, here’s an alternate invocation that brings in just the minimum required to produce a useful bridge:\nrosinstall_generator catkin common_msgs roscpp rosmsg --rosdistro kinetic --deps --wet-only --tar > kinetic-ros2-bridge-deps.rosinstall\nwstool init -j8 src kinetic-ros2-bridge-deps.rosinstall\n\n\nOtherwise, just follow the normal instructions, then source the resulting install_isolated/setup.bash before proceeding here to build ROS 2.\n\n\n\n\n\n\nDisable System Integrity Protection (SIP)¶\nOS X versions >=10.11 have System Integrity Protection enabled by default.\nSo that SIP doesn’t prevent processes from inheriting dynamic linker environment variables, such as DYLD_LIBRARY_PATH, you’ll need to disable it following these instructions.\n\n\nGet the ROS 2 code¶\nCreate a workspace and clone all repos:\nmkdir -p ~/ros2_ws/src\ncd ~/ros2_ws\nwget https://raw.githubusercontent.com/ros2/ros2/release-latest/ros2.repos\nvcs import src < ros2.repos\n\n\n\nNote\nIf you want to get all of the latest bug fixes then you can try the “tip” of development by replacing release-latest in the url above with master. The release-latest is preferred by default because it goes through more rigorous testing on release than changes to master do. See also Maintaining a Source Checkout.\n\n\n\nInstall additional DDS vendors (optional)¶\nROS 2.0 builds on top of DDS.\nIt is compatible with multiple DDS or RTPS (the DDS wire protocol) vendors.\nThe repositories you downloaded for ROS 2.0 includes eProsima’s Fast RTPS, which is the only bundled vendor.\nIf you would like to use one of the other vendors you will need to install their software separately before building.\nThe ROS 2.0 build will automatically build support for vendors that have been installed and sourced correctly.\nBy default we include eProsima’s FastRTPS in the workspace and it is the default middleware.\nDetailed instructions for installing other DDS vendors are provided in the “Alternative DDS sources” section below.\n\n\nBuild the ROS 2 code¶\nNote: if you are trying to build the ROS 1 <-> ROS 2 bridge, follow instead these modified instructions.\nRun the colcon tool to build everything (more on using colcon in this tutorial):\ncd ~/ros2_ws/\ncolcon build --symlink-install\n\n\n\n\nTry some examples¶\nIn a clean new terminal, source the setup file (this will automatically set up the environment for any DDS vendors that support was built for) and then run a talker:\n. ~/ros2_ws/install/setup.bash\nros2 run demo_nodes_cpp talker\n\n\nIn another terminal source the setup file and then run a listener:\n. ~/ros2_ws/install/setup.bash\nros2 run demo_nodes_cpp listener\n\n\nYou should see the talker saying that it’s Publishing messages and the listener saying I heard those messages.\nHooray!\n\n\nAlternative DDS sources¶\nThe demos will attempt to build against any detected DDS vendor.\nThe only bundled vendor is eProsima’s Fast RTPS, which is included in the default set of sources for ROS 2.0.\nIf you would like to switch out the vendor below are the instructions.\nWhen you run the build make sure that your chosen DDS vendor(s) are exposed in your environment.\nWhen multiple vendors are present, you can choose the used RMW implementation by setting the the environment variable RMW_IMPLEMENTATION to the package providing the RMW implementation.\nSee Working with multiple RMW implementations for more details.\n\nAdlink OpenSplice¶\nROS 2 Crystal Clemmys supports OpenSplice 6.9.\nROS 2 Bouncy Bolson supports OpenSplice 6.7.\nTo install OpenSplice, download the latest supported release from https://github.com/ADLINK-IST/opensplice/releases and unpack it.\nSource the release.com file provided to set up the environment before building your ROS 2 workspace, e.g.:\nsource <path_to_opensplice>/x86_64.darwin10_clang/release.com\n\n\n\n\nRTI Connext (5.3)¶\nTo use RTI Connext you will need to have obtained a license from RTI.\nYou can install the OS X package of Connext version 5.3 provided by RTI from their downloads page.\nYou also need a Java runtime installed to run the RTI code generator, which you can get here.\nAfter installing, run RTI launcher and point it to your license file.\nSource the setup file to set the NDDSHOME environment variable before building your workspace.\nThe setup file and path will depend on your macOS version.\n# macOS 10.12 Sierra\nsource /Applications/rti_connext_dds-5.3.1/resource/scripts/rtisetenv_x64Darwin16clang8.0.bash\n# macOS 10.13 High Sierra\nsource /Applications/rti_connext_dds-5.3.1/resource/scripts/rtisetenv_x64Darwin17clang9.0.bash\n\n\nYou may need to increase shared memory resources following https://community.rti.com/kb/osx510.\nIf you want to install the Connext DDS-Security plugins please refer to this page.\n\n\n\nTroubleshooting¶\n\nSegmentation Fault when using pyenv¶\npyenv seems to default to building Python with .a files, but that causes issues with rclpy, so it’s recommended to build Python with Frameworks enabled on macOS when using pyenv:\nhttps://github.com/pyenv/pyenv/wiki#how-to-build-cpython-with-framework-support-on-os-x\n\n\nLibrary not loaded; image not found¶\nIf you are seeing library loading issues at runtime (either running tests or running nodes), such as the following:\nImportError: dlopen(.../ros2_install/ros2-osx/lib/python3.7/site-packages/rclpy/_rclpy.cpython-37m-darwin.so, 2): Library not loaded: @rpath/librcl_interfaces__rosidl_typesupport_c.dylib\n  Referenced from: .../ros2_install/ros2-osx/lib/python3.7/site-packages/rclpy/_rclpy.cpython-37m-darwin.so\n  Reason: image not found\n\n\nthen you probably have System Integrity Protection enabled.\nSee “Disable System Integrity Protection (SIP)” above for how instructions on how to disable it.\n\n\nQt build errors e.g. unknown type name 'Q_ENUM'¶\nIf you see build errors related to Qt, e.g.:\nIn file included from /usr/local/opt/qt/lib/QtGui.framework/Headers/qguiapplication.h:46:\n/usr/local/opt/qt/lib/QtGui.framework/Headers/qinputmethod.h:87:5: error:\n      unknown type name 'Q_ENUM'\n    Q_ENUM(Action)\n    ^\n\n\nyou may be using qt4 instead of qt5: see https://github.com/ros2/ros2/issues/441\n\n\nMissing symbol when opencv (and therefore libjpeg, libtiff, and libpng) are installed with Homebrew¶\nIf you have opencv installed you might get this:\ndyld: Symbol not found: __cg_jpeg_resync_to_restart\n  Referenced from: /System/Library/Frameworks/ImageIO.framework/Versions/A/ImageIO\n  Expected in: /usr/local/lib/libJPEG.dylib\n in /System/Library/Frameworks/ImageIO.framework/Versions/A/ImageIO\n/bin/sh: line 1: 25274 Trace/BPT trap: 5       /usr/local/bin/cmake\n\n\nIf so, to build you’ll have to do this:\n$ brew unlink libpng libtiff libjpeg\n\n\nBut this will break opencv, so you’ll also need to update it to continue working:\n$ sudo install_name_tool -change /usr/local/lib/libjpeg.8.dylib /usr/local/opt/jpeg/lib/libjpeg.8.dylib /usr/local/lib/libopencv_highgui.2.4.dylib\n$ sudo install_name_tool -change /usr/local/lib/libpng16.16.dylib /usr/local/opt/libpng/lib/libpng16.16.dylib /usr/local/lib/libopencv_highgui.2.4.dylib\n$ sudo install_name_tool -change /usr/local/lib/libtiff.5.dylib /usr/local/opt/libtiff/lib/libtiff.5.dylib /usr/local/lib/libopencv_highgui.2.4.dylib\n$ sudo install_name_tool -change /usr/local/lib/libjpeg.8.dylib /usr/local/opt/jpeg/lib/libjpeg.8.dylib /usr/local/Cellar/libtiff/4.0.4/lib/libtiff.5.dylib\n\n\nThe first command is necessary to avoid things built against the system libjpeg (etc.) from getting the version in /usr/local/lib.\nThe others are updating things built by Homebrew so that they can find the version of libjpeg (etc.) without having them in /usr/local/lib.\n\n\n\n"},{"id":50,"url":"/doc/ros2/Installation/Linux-Install-Debians/","title":"Installing ROS2 via Debian Packages","content":"\nInstalling ROS2 via Debian Packages¶\n\nTable of Contents\n\nResources\nSetup Locale\nSetup Sources\nInstall ROS 2 packages\nEnvironment setup\n(optional) Install argcomplete\nSourcing the setup script\n\n\nInstall additional RMW implementations\nInstall additional packages using ROS 1 packages\n\n\nDebian packages for ROS 2 Bouncy (the latest release) are available for Ubuntu Bionic; packages for ROS 2 Ardent are available for Ubuntu Xenial.\n\nResources¶\n\nStatus Pages:\nROS 2 Crystal (Ubuntu Bionic): amd64, arm64\nROS 2 Bouncy (Ubuntu Bionic): amd64, arm64\nROS 2 Ardent (Ubuntu Xenial): amd64, arm64\n\n\nJenkins Instance\nRepositories\n\n\n\nSetup Locale¶\nMake sure you have a locale which supports UTF-8.\nIf you are in a minimal environment, such as a docker container, the locale may be something minimal like POSIX.\nWe test with the following settings.\nIt should be fine if you’re using a different UTF-8 supported locale.\nsudo locale-gen en_US en_US.UTF-8\nsudo update-locale LC_ALL=en_US.UTF-8 LANG=en_US.UTF-8\nexport LANG=en_US.UTF-8\n\n\n\n\nSetup Sources¶\nTo install the Debian packages you will need to add our Debian repository to your apt sources.\nFirst you will need to authorize our gpg key with apt like this:\nsudo apt update && sudo apt install curl gnupg2 lsb-release\ncurl http://repo.ros2.org/repos.key | sudo apt-key add -\n\n\nAnd then add the repository to your sources list:\nsudo sh -c 'echo \"deb [arch=amd64,arm64] http://packages.ros.org/ros2/ubuntu `lsb_release -cs` main\" > /etc/apt/sources.list.d/ros2-latest.list'\n\n\n\n\nInstall ROS 2 packages¶\nFirst set an environment variable for the ROS 2 release you want to install so it can be used in other commands.\nexport CHOOSE_ROS_DISTRO=crystal  # or bouncy or ardent\nsudo apt update\n\n\nDesktop Install (Recommended): ROS, RViz, demos, tutorials.\nsudo apt install ros-$CHOOSE_ROS_DISTRO-desktop\n\n\nROS-Base Install (Bare Bones): Communication libraries, message packages, command line tools. No GUI tools.\nsudo apt install ros-$CHOOSE_ROS_DISTRO-ros-base\n\n\nSee specific sections below for how to also install the ros1_bridge, TurtleBot packages, or alternative RMW packages.\n\n\nEnvironment setup¶\n\n(optional) Install argcomplete¶\nROS 2 command line tools use argcomplete to autocompletion. So if you want autocompletion, installing argcomplete is necessary.\n\nUbuntu 18.04¶\nsudo apt install python3-argcomplete\n\n\n\n\nUbuntu 16.04 (argcomplete >= 0.8.5)¶\nTo install argcomplete on Ubuntu 16.04 (Xenial), you’ll need to use pip, because the version available through apt will not work due to a bug in that version of argcomplete:\nsudo apt install python3-pip\nsudo pip3 install argcomplete\n\n\n\n\n\nSourcing the setup script¶\nSet up your environment by sourcing the following file.\nsource /opt/ros/$CHOOSE_ROS_DISTRO/setup.bash\n\n\nYou may want to add this to your .bashrc.\necho \"source /opt/ros/$ROS_DISTRO/setup.bash\" >> ~/.bashrc\n\n\n\n\n\nInstall additional RMW implementations¶\nBy default the RMW implementation FastRTPS is used.\nIf using Ardent OpenSplice is also installed.\nTo install support for OpenSplice or RTI Connext on Bouncy:\nsudo apt update\nsudo apt install ros-$ROS_DISTRO-rmw-opensplice-cpp # for OpenSplice\nsudo apt install ros-$ROS_DISTRO-rmw-connext-cpp # for RTI Connext (requires license agreement)\n\n\nBy setting the environment variable RMW_IMPLEMENTATION=rmw_opensplice_cpp you can switch to use OpenSplice instead.\nFor ROS 2 releases Bouncy and newer, RMW_IMPLEMENTATION=rmw_connext_cpp can also be selected to use RTI Connext.\nIf you want to install the Connext DDS-Security plugins please refer to this page.\n\n\nInstall additional packages using ROS 1 packages¶\nThe ros1_bridge as well as the TurtleBot demos are using ROS 1 packages.\nTo be able to install them please start by adding the ROS 1 sources as documented here.\nIf you’re using Docker for isolation you can start with the image ros:melodic or osrf/ros:melodic-desktop (or Kinetic if using Ardent).\nThis will also avoid the need to setup the ROS sources as they will already be integrated.\nNow you can install the remaining packages:\nsudo apt update\nsudo apt install ros-$ROS_DISTRO-ros1-bridge ros-$ROS_DISTRO-turtlebot2-*\n\n\n\n\n"},{"id":51,"url":"/doc/ros2/Contributing/MISRA-Compliance-Guide/","title":"MISRA Compliance Guide","content":"\nMISRA Compliance Guide¶\nThis section tries to give guidance about how to integrate ROS2 into a system that is intended to be compliant with the MISRA (Motor Industry Software Reliability Association) guidelines.\nWhat this section is about:\n\nROS2 core packages\nROS2 core client libraries\nIntegration considerations for ROS2 packages in a MISRA-Compliant system\n\nWhat this section is not about:\n\nApplying MISRA Guidelines to application and ecosystem ROS2 packages.\nA detailed description of the MISRA Guidelines\n\nRelation to other sections of this wiki:\n\nThe Quality Guide summarizes overall techniques and strategies for producing high quality ROS2 packages.\n\n\nWhat are the MISRA guidelines?¶\nFrom MISRA\n\nMISRA was originally established as a collaboration between vehicle manufacturers, component suppliers and engineering consultancies, and seeks to promote best practice in developing safety-related electronic systems in road vehicles and other embedded systems. To this end MISRA publishes documents that provide accessible information for engineers and management, and holds events to permit the exchange of experiences between practitioners.\nMISRA publishes a set of guidelines for both C and C++ that define a subset of the languages that are likely to be free from important programming mistakes for safety-critical systems. The MISRA guidelines are used as a component of various software standards, such as:\n\nISO 26262 - “Road Vehicles - Functional Safety”\nAUTOSAR - Automotive Open System Architecture\n\n\n\nWhy is this important to ROS2 users?¶\nAs robotics and autonomy grow, especially in the field of self-driving cars, users of ROS will need to be able to determine if the software is able to be used in a safety-critical environment. With suitable guidance and modification, it is expected that ROS2 could be integrated as part of a MISRA compliant system. This would enable users of ROS2 to take their work through multiple stages of the software lifecycle, from prototype through production.\n\n\nClaiming Compliance¶\nFrom: MISRA Compliance:2016\n\nIn order for a claim of MISRA compliance to have meaning, it is necessary to establish:\n\nExactly which guidelines are being applied;\nThe effectiveness of the enforcement methods;\nThe extent to which deviations have been used;\nUse of a disciplined software development process;\nThe status of any components developed outside of the project.\n\n\n\n\n"}]