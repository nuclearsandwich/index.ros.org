[{"id":20,"url":"/doc/ros2/Releases/Beta1-Overview/","title":"Beta 1 (codename ‘Asphalt’; December 2016)","content":"\nBeta 1 (codename ‘Asphalt’; December 2016)¶\n\nTable of Contents\n\nSupported Platforms\nFeatures\nImprovements since Alpha 8 release\nSelected features from previous Alpha releases\nKnown issues\n\n\n\n\n\nSupported Platforms¶\nWe support ROS 2 Beta 1 on three platforms: Ubuntu 16.04 (Xenial), Mac OS X 10.11 (El Capitan), and Windows 8.1 and 10. We provide both binary packages and instructions for how to compile from source for all 3 platforms.\n\n\nFeatures¶\n\nImprovements since Alpha 8 release¶\n\nSupport for node composition at compile, link, or runtime.\nA standard lifecycle for managed nodes.\nImproved support for Quality of Service tuning and tests.\nNew and updated design documents\nMore tutorials and examples\nBridging services to / from ROS1 (in addition to topics)\n\n\n\nSelected features from previous Alpha releases¶\nFor the complete list, see earlier release notes.\n\nC++ and Python implementations of ROS 2 client libraries including APIs for:\nPublishing and subscribing to ROS topics\nRequesting and replying ROS services (synchronous (C++ only) and asynchronous)\nGetting and setting ROS parameters (C++ only, synchronous and asynchronous)\nTimer callbacks\nSupport for interoperability between multiple DDS/RTPS implementations\neProsima FastRTPS is our default implementation, and is included in the binary packages\nRTI Connext is supported: build from source to try it out\nWe initially supported PrismTech OpenSplice but eventually decided to drop it\n\n\nA graph API for network events\nDistributed discovery\nRealtime safe code paths for publish and subscribe with compatible DDS implementation (only Connext at the moment)\nSupport for custom allocators\n\n\nROS 1 <-> ROS 2 dynamic bridge node\nExecutor threading model in C++\nExtended .msg format with new features:\nBounded arrays\nDefault values\n\n\n\n\n\nKnown issues¶\n\nWe’re tracking issues in various repositories, but the main entry point is the ros2/ros2 issue tracker\nWe’d like to highlight a known issue that we are working with eProsima to fix that results in significantly degrated performance for large messages under FastRTPS.\nThis will be observed when running some of the demos with larger image resolutions.\n\n\n\n\n"},{"id":21,"url":"/doc/ros2/Releases/Beta2-Overview/","title":"Beta 2 (codename ‘r2b2’; July 2017)","content":"\nBeta 2 (codename ‘r2b2’; July 2017)¶\n\nTable of Contents\n\nSupported Platforms\nFeatures\nImprovements since Beta 1 release\nNew demo application\nSelected features from previous Alpha/Beta releases\nKnown issues\n\n\n\n\n\nSupported Platforms¶\nWe support ROS 2 Beta 2 on three platforms: Ubuntu 16.04 (Xenial), Mac OS X 10.12 (Sierra), and Windows 10.\nWe provide both binary packages and instructions for how to compile from source for all 3 platforms (see install instructions as well as documentation).\n\n\nFeatures¶\n\nImprovements since Beta 1 release¶\n\nDDS_Security support (aka SROS2, see sros2)\nDebian packages for Ubuntu Xenial (see Debian install instructions).\nTypesupport has been redesigned so that you only build a single executable and can choose one of the available RMW implementations by setting an environment variable (see documentation).\nNamespace support for nodes and topics (see design article, see known issues below).\nA set of command-line tools using the extensible ros2 command (see tutorial).\nA set of macros for logging messages in C / C++ (see API docs of rcutils).\n\n\n\nNew demo application¶\n\nTurtlebot 2 demos using the following repositories that have been (partially) converted to ROS 2 (Linux only):\nros_astra_camera\ndepthimage_to_laserscan\npcl_conversions\ncartographer\ncartographer_ros\nceres-solver\nnavigation\nteleop_twist_keyboard\njoystick_drivers\nteleop_twist_joy\n\n\nDummy_robot demo:\nrobot_model\nrobot_state_publisher\n\n\n\n\n\nSelected features from previous Alpha/Beta releases¶\nFor the complete list, see earlier release notes.\n\nC++ and Python implementations of ROS 2 client libraries including APIs for:\nPublishing and subscribing to ROS topics\nRequesting and replying ROS services (synchronous (C++ only) and asynchronous)\nGetting and setting ROS parameters (C++ only, synchronous and asynchronous)\nTimer callbacks\n\n\nSupport for interoperability between multiple DDS/RTPS implementations\neProsima FastRTPS is our default implementation, and is included in the binary packages\nRTI Connext is supported: build from source to try it out\nWe initially supported PrismTech OpenSplice but support for it is currently on hold\n\n\nA graph API for network events\nDistributed discovery\nRealtime safe code paths for publish and subscribe with compatible DDS implementation (only Connext at the moment)\nSupport for custom allocators\n\n\nROS 1 <-> ROS 2 dynamic bridge node\nExecutor threading model (C++ only)\nComponent model to compose nodes at compile / link / runtime\nManaged component using a standard lifecycle\nExtended .msg format with new features:\nBounded arrays\nDefault values\n\n\n\n\n\nKnown issues¶\n\nWe’re tracking issues in various repositories, but the main entry point is the ros2/ros2 issue tracker\nWe’d like to highlight a known issue that we are looking into which doesn’t allow two topics with the same base name but different namespaces to have a different type when using rmw_connext_cpp.\nServices with long responses are not working with Fast-RTPS. The fix, while not being part of beta2, is available upstream so you can work around this issue by building from source using Fast-RTPS master branch.\n\n\n\n\n"},{"id":22,"url":"/doc/ros2/Tutorials/Ament-Tutorial/","title":"Using Ament","content":"\nUsing Ament¶\n\nTable of Contents\n\nBackground\nPrerequisites\nDevelopment Environment\n\n\nBasics\nCreate directory structure\nAdd some sources\nRun the build\nRun the tests\nSource the environment\nTry a demo\n\n\nDevelop your own package\nCreate an overlay\nCreate your own package\n\n\nTips\n\n\nThis will provide you with a quick summary of how to get up and running using an ament workspace.\nIt will be a practical tutorial and is not designed to replace the core documentation.\n\nWarning\nAs of ROS 2 Bouncy the recommended build tool is ``colcon`` described in the `colcon tutorial <Colcon-Tutorial>`.\nThe current default branch as well as releases after Bouncy do not include ament_tools anymore.\n\n\nBackground¶\nAment is an iteration on the catkin meta-build tool.\nFor more information on the design of ament see this document.\nThe source can be found in the ament GitHub organization.\n\n\nPrerequisites¶\n\nDevelopment Environment¶\nMake sure that you have setup your development environment according to the building-from-source instruction.\n\n\n\nBasics¶\nAn ament workspace is a directory with a particular structure.\nCommonly there is a src subdirectory.\nInside that subdirectory is where the source code will be located.\nTypically the directory starts otherwise empty.\nAment does out of source builds.\nBy default it will create a build and install directory as peers of the src directory.\nThe build directory will be where intermediate files are stored.\nFor each package a subfolder will be created in which e.g. CMake is being invoked.\nThe install directory is where each package will be installed to.\nNB: Compared to catkin there is no devel directory.\n\nCreate directory structure¶\nTo make the basic structure in the directory ~/ros2_ws:\nmkdir -p ~/ros2_ws/src\ncd ~/ros2_ws\n\n\nThis is the directory structure of ~/ros2_ws that you can expect at this point:\n.\n└── src\n\n1 directory, 0 files\n\n\n\n\nAdd some sources¶\nTo start off we need to setup an underlay without any of ROS2 installed.\nNote: if you do not have vcs installed, instructions are here.\nwget https://raw.githubusercontent.com/ros2/ros2/master/ros2.repos\nvcs import src < ros2.repos\n\n\nThis is the directory structure of ~/ros2_ws that you can expect after adding sources (note the exact structure and number of directories/files may change over time):\n.\n├── ros2.repos\n└── src\n    ├── ament\n    │   ├── ament_cmake\n    │   ├── ament_index\n    |   ...\n    │   ├── osrf_pycommon\n    │   └── uncrustify\n    ├── eProsima\n    │   ├── Fast-CDR\n    │   └── Fast-RTPS\n    ├── ros\n    │   ├── class_loader\n    │   └── console_bridge\n    └── ros2\n        ├── ament_cmake_ros\n        ├── common_interfaces\n        ├── demos\n        ...\n        ├── urdfdom\n        ├── urdfdom_headers\n        └── vision_opencv\n\n51 directories, 1 file\n\n\n\n\nRun the build¶\nSince this is a bootstrap environment we need to call ament.py by its full path.\nNote: In the future once ament is either installed on your system or in an underlayed workspace this will no longer be necessary.\nSince there is no devel space in ament and it requires installing each package it supports the option --symlink-install.\nThis allows the installed files to be changed by changing the files in the source space (e.g. Python files or other not compiled resourced) for faster iteration.\nsrc/ament/ament_tools/scripts/ament.py build --build-tests --symlink-install\n\n\n\n\nRun the tests¶\nTo run the tests you just built, with the --build-tests option above, run the following:\nsrc/ament/ament_tools/scripts/ament.py test\n\n\nIf you have built (and installed) a workspace before including the tests (using build --build-tests) you can skip the build and install step to speed up the process:\nsrc/ament/ament_tools/scripts/ament.py test --skip-build --skip-install\n\n\n\n\nSource the environment¶\nWhen ament has completed building successfully the output will be in the install directory.\nTo use the executables and libraries you need to e.g. add the install/bin directory to your path.\nAment will have generated bash files in the install directory to help setup the environment.\nThese files will both add the required elements to your path and library paths as well as provide any exported bash or shell commands exported by packages.\n. install/local_setup.bash\n\n\nNB: This is slightly different than catkin.\nThe local_setup.* file is slightly different than the setup.* file in that it will only apply settings from the current workspace.\nWhen using more than one workspace you will still source the setup.* files to get the environment including all parent workspaces.\n\n\nTry a demo¶\nWith the environment sourced you can now run executables built by ament.\nros2 run demo_nodes_cpp listener &\nros2 run demo_nodes_cpp talker\n\n\nAnd you will see the numbers incrementing.\nLets take down the nodes and try creating our own workspace overlay.\n^-C\nkill %1\n\n\n\n\n\nDevelop your own package¶\nAment uses the same package.xml specification as defined for catkin in REP 140.\nYou can create your own package inside the src directory however it is recommended to use an overlay when you are going to iterate only on a few packages.\n\nCreate an overlay¶\nNow that you have setup your bootstrap underlay you will also find ament is on your path.\nLets make a new overlay directory ~/ros2_overlay_ws.\nmkdir -p ~/ros2_overlay_ws/src\ncd ~/ros2_overlay_ws/src\n\n\nAnd to get started we’ll overlay the ros2/examples repository:\n# If you know that you're using the latest branch of all\n# repositories in the underlay, you can also get the latest\n# version of the ros2/examples repository, with this command:\n#   git clone https://github.com/ros2/examples.git\n# Otherwise, clone a copy from the underlay source code:\ngit clone ~/ros2_ws/src/ros2/examples\n\n\nAnd build the overlay, but let’s build with debug so we can make sure to get debug symbols:\ncd ~/ros2_overlay_ws\nament build --cmake-args -DCMAKE_BUILD_TYPE=Debug\n\n\nNow this overlay is on top of the existing overlay so you’ll find that which talker currently refers to the one from the underlay.\nIf you source ~/ros2_overlay_ws/install/local_setup.bash it will change to refer to talker in the overlay.\nIf you are returning with a new terminal to your development and want to pick up developing on your overlay you can simply source ~/ros2_overlay_ws/install/setup.bash which will source all parent workspaces environments automatically.\n\n\nCreate your own package¶\nYou can create your own package.\nThe equivalent of catkin_create_package will be ported to ament but is not available yet.\nAment supports multiple build types.\nThe recommended build types are ament_cmake and ament_python.\nAlso supported are pure cmake packages.\nIt’s expected to add support for more build types.\nAn example of an ament_python build is the ament_tools package, where the setup.py is the primary entry point for building.\nA package such as demo_nodes_cpp uses the ament_cmake build type, and uses CMake as the build tool.\n\n\n\nTips¶\n\nIf you do not want to build a specific package place an empty file named AMENT_IGNORE in the directory and it will not be indexed.\n\n“Catch all” options like –cmake-args should be placed after other options, or delimited with ‘–’:\n\n\n\nament build . --force-cmake-configure --cmake-args -DCMAKE_BUILD_TYPE=Debug -- --ament-cmake-args -DCMAKE_BUILD_TYPE=Release\n\n\n\nIf you want to run a single particular test from a package:\nament test --only-packages YOUR_PKG_NAME --ctest-args -R YOUR_TEST_IN_PKG\n\n\n\n\n\n\n"},{"id":23,"url":"/doc/ros2/Tutorials/Node-arguments/","title":"Passing ROS arguments to nodes via the command-line","content":"\nPassing ROS arguments to nodes via the command-line¶\n\nTable of Contents\n\nName remapping\nLogger configuration\nParameters\n\n\nAll ROS nodes take a set of arguments that allow various properties to be reconfigured.\nExamples include configuring the name/namespace of the node, topic/service names used, and parameters on the node.\nNote: all features on this page are only available as of the ROS 2 Bouncy release.\n\nName remapping¶\nNames within a node (e.g. topics/services) can be remapped using the syntax <old name>:=<new name>.\nThe name/namespace of the node itself can be remapped using __node:=<new node name> and __ns:=<new node namespace>.\nNote that these remappings are “static” remappings, in that they apply for the lifetime of the node.\n“Dynamic” remapping of names after nodes have been started is not yet supported.\nSee this design doc for more details on remapping arguments (not all functionality is available yet).\n\nExample¶\nThe following invocation will cause the talker node to be started under the node name my_talker, publishing on the topic named my_topic instead of the default of chatter.\nThe namespace, which must start with a forward slash, is set to /demo, which means that topics are created in that namespace (/demo/my_topic), as opposed to globally (/my_topic).\nros2 run demo_nodes_cpp talker __ns:=/demo __node:=my_talker chatter:=my_topic\n\n\n\nPassing remapping arguments to specific nodes¶\nIf multiple nodes are being run within a single process (e.g. using Composition), remapping arguments can be passed to a specific node using its name as a prefix.\nFor example, the following will pass the remapping arguments to the specified nodes:\nros2 run composition manual_composition talker:__node:=my_talker listener:__node:=my_listener\n\n\n\n\n\n\nLogger configuration¶\nSee __log_level argument usage in the logging page.\n\n\nParameters¶\nParameters support for Python nodes was added in Crystal. In Bouncy only C++ nodes are supported.\nSetting parameters from the command-line is currently supported in the form of yaml files.\nSee here for examples of the yaml file syntax. As an example, save the following as demo_params.yaml\ntalker:\n    ros__parameters:\n        some_int: 42\n        a_string: \"Hello world\"\n        some_lists:\n            some_integers: [1, 2, 3, 4]\n            some_doubles : [3.14, 2.718]\n\n\nThen run the following:\nros2 run demo_nodes_cpp talker __params:=demo_params.yaml\n\n\nOther nodes will be able to retrieve the parameter values, e.g.:\n$ ros2 param list talker\n  a_string\n  some_int\n  some_lists.some_doubles\n  some_lists.some_integers\n\n\n\n\n"}]