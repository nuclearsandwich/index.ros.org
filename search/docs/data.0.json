[{"id":0,"url":"/doc/ros2/","title":"ROS2 Overview","content":"\nROS 2¶\n\nOverview¶\n\n\nInstallation\nRoadmap\nROS 2 Releases\nROS 2 Concepts\nFeatures Status\nTutorials\nTroubleshooting\nContributing to ROS 2\nRelated Projects\nContact us\nAbout this documentation\n\n\nThe Robot Operating System (ROS) is a set of software libraries and tools that help you build robot applications.\nFrom drivers to state-of-the-art algorithms, and with powerful developer tools, ROS has what you need for your next robotics project.\nAnd it’s all open source.\nHere you will find documentation on how to install and use software from ROS 2, which is a new version of ROS that is under heavy development.\nSee below for more information on ROS 2.\nIf you’re looking for information on ROS 1 (i.e., ROS as it has existed for several years and what you might be using right now), check the ROS website or the documentation wiki.\nBefore you proceed here, please read the features page to get an idea of what is in the current ROS 2 release.\n\n\nReleases¶\nSee the releases page.\n\n\nInstallation¶\nSee the installation page.\n\n\nTutorials and Features¶\nROS 2 is under heavy development.\nYou can check out the tutorials page to see a range of examples of what the system can do in its current state, if it fits your project today depending on the exact requirement.\nFor details of the current features, see features status page.\nIf migrating code from ROS to ROS 2, check the migration guide.\n\n\nWhat’s ahead¶\nROS 2 is currently planning to release new versions every six month (which is twice as often as ROS 1) to give the community members an opportunity to provide early feedback on the evolving system.\nSee the Roadmap for details on the planned upcoming features for ROS 2.\n\n\nContributing¶\nSee the contributing page and the developer guide for details on how to contribute to ROS 2 developments.\n\n\nReporting problems and asking questions¶\nSee the contact page.\n\n\n\nAbout ROS 2¶\nSince ROS was started in 2007, a lot has changed in the robotics and ROS community.\nThe goal of the ROS 2 project is to adapt to these changes, leveraging what is great about ROS 1 and improving what isn’t.\nThere’s a full article on the motivation of ROS 2 here.\n\nWhere to find more information¶\nThere are various articles on the design of ROS 2 at design.ros2.org, such as: *Why ROS 2.0?*, *ROS on DDS*, and *Changes between ROS 1 and ROS 2*.\nThe code for ROS 2 is open source and broken into various repositories.\nYou can find the code for most of the repositories on the ros2 github organization.\ndocs.ros2.org contains current details about ROS 2 internal design and organization.\nawesome-ros2 is a “cheat sheet” style quick reference for ROS 2 packages and resources which will get (hopefully) listed on the curated list of awesome lists to help GitHub users to get to know ROS 2.\nThe following ROSCon talks have been given on ROS 2 and provide information about the workings of ROS 2 and various demos:\n\n\n\n\n\n\n\nTitle\nType\nLinks\n\n\n\nHands-on ROS 2: A Walkthrough\nROSCon 2018 presentation\nslides / video\n\nLaunch for ROS 2\nROSCon 2018 presentation\nslides / video\n\nThe ROS 2 vision for advancing the future of robotics development\nROSCon 2017 presentation\nslides / video\n\nROS 2 Update - summary of alpha releases, architectural overview\nROSCon 2016 presentation\nslides / video\n\nEvaluating the resilience of ROS2 communication layer\nROSCon 2016 presentation\nslides / video\n\nState of ROS 2 - demos and the technology behind\nROSCon 2015 presentation\nslides / video\n\nROS 2 on “small” embedded systems\nROSCon 2015 presentation\nslides / video\n\nReal-time control in ROS and ROS 2.0\nROSCon 2015 presentation\nslides / video\n\nWhy you want to use ROS 2\nROSCon 2014 presentation\nslides / video\n\nNext-generation ROS: Building on DDS\nROSCon 2014 presentation\nslides / video\n\n\n\n\n\n\n\n"},{"id":1,"url":"/doc/ros2/About/","title":"About this documentation","content":"\nAbout this documentation¶\nThis documentation lives in http://github.com/ros2/ros2_documentation. Purely written in ReST markup format, it is processed using Sphinx during ROSIndex builds. Intersphinx support is readily available for cross-linking package specific entities.\nUpdates submission is currently handled through pull requests.\n\n"},{"id":2,"url":"/doc/ros2/Contact/","title":"Contact us","content":"\nContact us¶\nIf you try out ROS 2 and have feedback or questions, please get in touch with us.\n\nGeneral/design discussion¶\nDiscussions about ROS 2 development and plans are happening on the “Next Generation ROS” Discourse category (previously on the sig-ng-ros (Special Interest Group on Next-Generation ROS) mailing list).\nJoin us there and participate in the conversation.\nIf you’d like to contact us privately (e.g., if your question contains information sensitive to your organization or project), you can email us directly at ros@osrfoundation.org.\n\n\nTroubleshooting¶\nIf you need help with troubleshooting your system, please first check ROS Answers to see if others have come across similar issues, otherwise ask a new questions on ROS Answers making sure to include at least the ros2 tag and the rosdistro version you are running, e.g. ardent.\n\n\nOpening issues¶\nIf you identify bugs, you can open an issue to notify the ROS team.\nBefore opening an issue, check if other users have reported similar issues by searching across the ros2 and ament Github organizations: example search query.\nIf it has not been reported, feel free to open an issue in the appropriate repository tracker.\nIf it’s not clear which tracker to use for a particular issue, file it in the ros2/ros2 repository and we’ll have a look at it.\nWhen filing an issue, please make sure to:\n\nInclude enough information for another person to understand the issue.\nInclude information about the exact platform, software, versions, and environment relevant to the problem. This includes how you installed the software (from binaries or from source) and which ROS middleware/DDS vendor you are using (if you know it).\nIn case of a bug consider providing a short, self contained, correct (compilable), example.\n\nPull requests are welcome for any of the ros2 repositories to suggest specific code changes!\nSee Contributing for more details on how to contribute.\n\n\n"},{"id":3,"url":"/doc/ros2/Roadmap/","title":"Roadmap","content":"\nRoadmap¶\n\nTable of Contents\n\nPlanned upcoming releases\nNext release - D-turtle (June 2019)\nFuture (in no specific order)\n\n\nPast releases\n\n\nFor more information on the design of ROS 2 please see design.ros2.org.\nThe core code for ROS 2 is on the ros2 github organization.\nThe Discourse forum/mailing list for discussing ROS 2 design is ng-ros.\nQuestions should be asked on ROS answers, make sure to include at least the ros2 tag and the rosdistro version you are running, e.g. ardent.\n\nPlanned upcoming releases¶\nThis is a list of the features targeted for development in the future.\nSubject to change.\n\nNext release - D-turtle (June 2019)¶\nThe D-turtle meta ticket on GitHub will in the near future enumerate the ongoing high level tasks as well as references specific tickets with more details.\n\n\nFuture (in no specific order)¶\n\nDesign / Concept¶\n\nIDL format: using IDL 4.2 to specify ROS interfaces (msgs, srvs, actions)\nSupport for non-ASCII strings in messages / services\nLeverage new features like grouping and various annotations (comments, units)\nExtend usage to .idl files with just constants and/or declare parameters with ranges\n\n\nProgress on migration plan\nReconsider 1-to-1 mapping of ROS nodes to DDS participants\nUniqueness of node names\noptional XML or YAML frontend for Python-based launch\n\n\n\nInfrastructure and tools¶\n\nBuilding\nSupport to generate “fat” packages / archives\nWindows and Mac OS packages\n\n\nDocumentation\nImprove documentation platform\nSupport for doc jobs on the ROS 2 buildfarm\nConsider consolidating with design.ros2.org\nProvide three different kinds of content:\n“demos” to show features and cover them with tests\n“examples” to show a simple/minimalistic usage which might have multiple ways to do something\n“tutorials” which contain more comments and anchors for the wiki (teaching one recommended way)\n\n\n\n\n\n\n\nNew features¶\nThe trailing stars indicate the rough effort: 1 star for small, 2 stars for medium, 3 stars for large.\n\nActions in Python\nLogging improvements [* / **]\nConfiguration specified in a file\nC++ stream operators\nColorize console output\n\n\nParameters\nset individual parameters via command line arguments (instead of passing a yaml file)\nSpecify the value range\nDefine read-only parameters\n\n\nAdditional Graph API features [** / ***]\na la ROS 1 Master API: http://wiki.ros.org/ROS/Master_API\nEvent-based notification\nRequires knowledge of the rmw interface which needs to be extended\n\n\nRemapping [** / ***]\nDynamic remapping and aliasing through a Service interface\n\n\nType masquerading [***]\na la ROS 1’s message traits: http://wiki.ros.org/roscpp/Overview/MessagesSerializationAndAdaptingTypes\nRequires knowledge of the typesupport system\n\n\nExpand on real-time safety [***]\nWith FastRTPS\nFor services, clients, and parameters\nSupport deterministic ordering of executables in Executor (fair scheduling)\nExpose more quality of service parameters related to real-time performance\nReal-time-safe intra-process messaging\n\n\nMulti-robot supporting features and demos [***]\nUndesired that all nodes across all robots share the same domain (and discover each other)\nDesign how to “partition” the system\n\n\nImplement C client library rclc [**]\nSupport more DDS / RTPS implementations:\nConnext dynamic [*]\nRTI’s micro implementation [*]\nEclipse Cyclone DDS (former ADLINK OpenSplice) [*]\n\n\nsecurity improvements:\nmore granularity in security configuration (allow authentication only, authentication and encryption, etc) [*]\nextend access control permission generation to support services [*]\nintegrate DDS-Security logging plugin (unified way to aggregate security events and report them to the users through a ROS interface) [**]\nkey storage security (right now, keys are just stored in the filesystem) [**]\nmore user friendly interface (make it easier to specify security config). Maybe a Qt GUI? This GUI could also assist in distributing keys somehow. [***]\nA way to say “please secure this running system” with some UI that would auto-generate keys and policies for everything that is currently running. [***]\nIf there are hardware-specific features for securing keys or accelerating encryption/signing messages, that could be interesting to add to DDS/RTPS implementations that don’t use it already. [***]\n\n\n\n\n\nPort of existing ROS 1 functionality¶\n\nPerception metapackage\nImage pipeline\nImprovements to the intra process comm. to reduce latency / overhead\n\n\nMoveIt\nNeeds Actions\nMoveit Maintainers are tracking: https://discourse.ros.org/t/moveit-maintainer-meeting-recap-july-25th-2018/5504\n\n\nRQt\nconvert more plugins [* each when dependencies are available]\n\n\nDiagnostics\n\n\n\nReducing Technical Debt¶\n\nExtend testing and resolve bugs in the current code base\nWaitset inconsistency\nMulti-threading problems with components\nReduce overhead / latency of intra-process communication\n\n\nFix flaky tests.\nAbility to run (all) unit tests with tools e.g. valgrind\nAPI review\nSynchronize / reconcile design docs with the implementation.\nPre-release retrospective review (APIs, docs, etc.)\n\n\nAddress / classify pending tickets\nAddress TODOs in code / docs\n\n\n\n\n\nPast releases¶\nSee list of releases.\n\n\n"}]